[{"C:\\mern_course\\FSFinalProject1\\CinemaFE\\cinemaapp\\src\\index.js":"1","C:\\mern_course\\FSFinalProject1\\CinemaFE\\cinemaapp\\src\\App.js":"2","C:\\mern_course\\FSFinalProject1\\CinemaFE\\cinemaapp\\src\\reportWebVitals.js":"3","C:\\mern_course\\FSFinalProject1\\CinemaFE\\cinemaapp\\src\\Components\\movies\\MoviesComp.js":"4","C:\\mern_course\\FSFinalProject1\\CinemaFE\\cinemaapp\\src\\Redux\\reducer.js":"5","C:\\mern_course\\FSFinalProject1\\CinemaFE\\cinemaapp\\src\\Utils\\movieUtil.js":"6","C:\\mern_course\\FSFinalProject1\\CinemaFE\\cinemaapp\\src\\Components\\CompA.js":"7","C:\\mern_course\\FSFinalProject1\\CinemaFE\\cinemaapp\\src\\Components\\CompB.js":"8","C:\\mern_course\\FSFinalProject1\\CinemaFE\\cinemaapp\\src\\Components\\CompC.js":"9","C:\\mern_course\\FSFinalProject1\\CinemaFE\\cinemaapp\\src\\Components\\WelcomeComp.js":"10","C:\\mern_course\\FSFinalProject1\\CinemaFE\\cinemaapp\\src\\Components\\LoginComp.js":"11","C:\\mern_course\\FSFinalProject1\\CinemaFE\\cinemaapp\\src\\Components\\MainComp.js":"12","C:\\mern_course\\FSFinalProject1\\CinemaFE\\cinemaapp\\src\\Utils\\usersUtil.js":"13","C:\\mern_course\\FSFinalProject1\\CinemaFE\\cinemaapp\\src\\Components\\HeaderComp.js":"14","C:\\mern_course\\FSFinalProject1\\CinemaFE\\cinemaapp\\src\\Components\\subscriptions\\MembersComp.js":"15","C:\\mern_course\\FSFinalProject1\\CinemaFE\\cinemaapp\\src\\Components\\users\\AddUserComp.js":"16","C:\\mern_course\\FSFinalProject1\\CinemaFE\\cinemaapp\\src\\Components\\users\\CreateAccountComp.js":"17","C:\\mern_course\\FSFinalProject1\\CinemaFE\\cinemaapp\\src\\Components\\customField\\PermossionComp.js":"18","C:\\mern_course\\FSFinalProject1\\CinemaFE\\cinemaapp\\src\\Components\\customField\\PermossionComp1.js":"19","C:\\mern_course\\FSFinalProject1\\CinemaFE\\cinemaapp\\src\\Components\\users\\UsersComp.js":"20","C:\\mern_course\\FSFinalProject1\\CinemaFE\\cinemaapp\\src\\Components\\users\\UserComp.js":"21","C:\\mern_course\\FSFinalProject1\\CinemaFE\\cinemaapp\\src\\Components\\users\\EditUserComp.js":"22","C:\\mern_course\\FSFinalProject1\\CinemaFE\\cinemaapp\\src\\Components\\movies\\MovieComp.js":"23","C:\\mern_course\\FSFinalProject1\\CinemaFE\\cinemaapp\\src\\Components\\users\\menu\\UserMenu.js":"24","C:\\mern_course\\FSFinalProject1\\CinemaFE\\cinemaapp\\src\\Components\\movies\\AddMovieComp.js":"25","C:\\mern_course\\FSFinalProject1\\CinemaFE\\cinemaapp\\src\\Components\\movies\\EditMovieComp.js":"26","C:\\mern_course\\FSFinalProject1\\CinemaFE\\cinemaapp\\src\\Components\\movies\\menu\\MovieMenu.js":"27","C:\\mern_course\\FSFinalProject1\\CinemaFE\\cinemaapp\\src\\Components\\subscriptions\\menu\\MemberMenu.js":"28","C:\\mern_course\\FSFinalProject1\\CinemaFE\\cinemaapp\\src\\Components\\subscriptions\\MemberComp.js":"29","C:\\mern_course\\FSFinalProject1\\CinemaFE\\cinemaapp\\src\\Components\\subscriptions\\EditMemberComp.js":"30","C:\\mern_course\\FSFinalProject1\\CinemaFE\\cinemaapp\\src\\Components\\subscriptions\\AddMemberComp.js":"31","C:\\mern_course\\FSFinalProject1\\CinemaFE\\cinemaapp\\src\\Utils\\membersUtil.js":"32","C:\\mern_course\\FSFinalProject1\\CinemaFE\\cinemaapp\\src\\Utils\\SubscriptionsUtil.js":"33","C:\\mern_course\\FSFinalProject1\\CinemaFE\\cinemaapp\\src\\Components\\subscriptions\\MembersSubscriptionsComp.js":"34","C:\\mern_course\\FSFinalProject1\\CinemaFE\\cinemaapp\\src\\Components\\subscriptions\\MemberSubscriptionsComp.js":"35","C:\\mern_course\\FSFinalProject1\\CinemaFE\\cinemaapp\\src\\Utils\\subscriptionsUtil.js":"36"},{"size":1245,"mtime":1615886104163,"results":"37","hashOfConfig":"38"},{"size":4435,"mtime":1618225370450,"results":"39","hashOfConfig":"38"},{"size":375,"mtime":1615301173254,"results":"40","hashOfConfig":"38"},{"size":1026,"mtime":1617883495510,"results":"41","hashOfConfig":"38"},{"size":4956,"mtime":1618730789350,"results":"42","hashOfConfig":"38"},{"size":1274,"mtime":1617862504719,"results":"43","hashOfConfig":"38"},{"size":630,"mtime":1612455879221,"results":"44","hashOfConfig":"38"},{"size":341,"mtime":1612423971804,"results":"45","hashOfConfig":"38"},{"size":346,"mtime":1612455798597,"results":"46","hashOfConfig":"38"},{"size":397,"mtime":1615301173246,"results":"47","hashOfConfig":"38"},{"size":2381,"mtime":1615301173245,"results":"48","hashOfConfig":"38"},{"size":768,"mtime":1615998903141,"results":"49","hashOfConfig":"38"},{"size":1209,"mtime":1615726984107,"results":"50","hashOfConfig":"38"},{"size":666,"mtime":1615301173245,"results":"51","hashOfConfig":"38"},{"size":581,"mtime":1617883547023,"results":"52","hashOfConfig":"38"},{"size":11398,"mtime":1617888027602,"results":"53","hashOfConfig":"38"},{"size":1452,"mtime":1615301173250,"results":"54","hashOfConfig":"38"},{"size":1413,"mtime":1615301173247,"results":"55","hashOfConfig":"38"},{"size":1265,"mtime":1615301173247,"results":"56","hashOfConfig":"38"},{"size":677,"mtime":1615888521687,"results":"57","hashOfConfig":"38"},{"size":1697,"mtime":1615888342762,"results":"58","hashOfConfig":"38"},{"size":12047,"mtime":1617778713759,"results":"59","hashOfConfig":"38"},{"size":1242,"mtime":1618121080641,"results":"60","hashOfConfig":"38"},{"size":543,"mtime":1615888521687,"results":"61","hashOfConfig":"38"},{"size":5547,"mtime":1618303184644,"results":"62","hashOfConfig":"38"},{"size":6514,"mtime":1617862074960,"results":"63","hashOfConfig":"38"},{"size":553,"mtime":1615888593443,"results":"64","hashOfConfig":"38"},{"size":573,"mtime":1617884633549,"results":"65","hashOfConfig":"38"},{"size":756,"mtime":1618220835199,"results":"66","hashOfConfig":"38"},{"size":164,"mtime":1618730789348,"results":"67","hashOfConfig":"38"},{"size":3366,"mtime":1618234638684,"results":"68","hashOfConfig":"38"},{"size":1296,"mtime":1618730789351,"results":"69","hashOfConfig":"38"},{"size":3548,"mtime":1618216894768,"results":"70","hashOfConfig":"38"},{"size":934,"mtime":1618226819172,"results":"71","hashOfConfig":"38"},{"size":1570,"mtime":1618232350219,"results":"72","hashOfConfig":"38"},{"size":3552,"mtime":1618234475831,"results":"73","hashOfConfig":"38"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},"1221art",{"filePath":"77","messages":"78","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"76"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"76"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"76"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"76"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"94"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"76"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"76"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"76"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"76"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"76"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"76"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131","usedDeprecatedRules":"76"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"76"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139","usedDeprecatedRules":"76"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"76"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151","usedDeprecatedRules":"76"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154","usedDeprecatedRules":"76"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"157","messages":"158","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"159","messages":"160","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"161","usedDeprecatedRules":"76"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"164","usedDeprecatedRules":"76"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"167","usedDeprecatedRules":"76"},"C:\\mern_course\\FSFinalProject1\\CinemaFE\\cinemaapp\\src\\index.js",[],["168","169"],"C:\\mern_course\\FSFinalProject1\\CinemaFE\\cinemaapp\\src\\App.js",["170","171","172"],"import React, {useEffect, useState} from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport './App.css';\r\n\r\nimport { Route, Switch } from 'react-router-dom';\r\n\r\n\r\nimport Login from '../src/Components/LoginComp';\r\nimport Main from './Components/MainComp';\r\nimport Welcome from './Components/WelcomeComp';\r\nimport Movies from './Components/movies/MoviesComp';\r\nimport Members from './Components/subscriptions/MembersComp';\r\nimport MembersSubscriptions from './Components/subscriptions/MembersSubscriptionsComp';\r\nimport EditMember from './Components/subscriptions/EditMemberComp';\r\nimport AddMember from './Components/subscriptions/AddMemberComp';\r\nimport Header from './Components/HeaderComp';\r\nimport Users from './Components/users/UsersComp';\r\nimport AddUser from './Components/users/AddUserComp';\r\nimport EditUser from './Components/users/EditUserComp';\r\nimport createAccount from './Components/users/CreateAccountComp';\r\nimport AddMovie from './Components/movies/AddMovieComp';\r\nimport EditMovie from './Components/movies/EditMovieComp';\r\n\r\n\r\nimport permissions from './Components/customField/PermossionComp';\r\nimport permissions1 from './Components/customField/PermossionComp1';\r\nimport usersUtil from './Utils/usersUtil';\r\nimport movieUtil from '../src/Utils/movieUtil';\r\nimport memberUtil from './Utils/membersUtil';\r\nimport subscriptionsUtil from './Utils/subscriptionsUtil';\r\n\r\nfunction App() {\r\n\r\n  const users = useSelector(state => state.users);\r\n  const movies = useSelector(state => state.movies);\r\n  const members = useSelector(state => state.members);\r\n const membersSubscriptions = useSelector(state => state.membersSubscriptions)\r\n  const subscriptions = useSelector(state => state.subscriptions)\r\n\r\n  const dispatch = useDispatch();\r\n  const userFullName = useSelector(state => state.userFullName);\r\n    \r\n  useEffect(() => {\r\n    // Using an IIFE\r\n    (async function loadData() {\r\n      if(users.length === 0){\r\n        let respUser = await usersUtil.getUsers();\r\n\r\n        if(respUser != null){\r\n          dispatch({\r\n            type: \"LoadUsers\",\r\n            payload: respUser\r\n          })\r\n        }\r\n      }\r\n\r\n      if(movies.length === 0){\r\n          let resp = await movieUtil.loadMovies();\r\n          let movies = resp.movies;\r\n         // let movie3 = movies.slice(0,2)\r\n\r\n          dispatch({\r\n            type : \"LoadMovies\",\r\n            payload : movies\r\n          })\r\n        }\r\n\r\n        if(members.length === 0){\r\n          let resp = await memberUtil.loadMembers();\r\n          let members = resp.members;\r\n          \r\n          dispatch({\r\n            type : \"LoadMembers\",\r\n            payload : members\r\n          })\r\n        }\r\n\r\n        //LoadMembersSubscriptions\r\n        if(membersSubscriptions.length === 0){\r\n          let membersSubscriptions = await subscriptionsUtil.getFullMembersSubscriptions();\r\n\r\n          dispatch({\r\n            type : \"LoadMembersSubscriptions\",\r\n            payload : membersSubscriptions\r\n          })\r\n        }\r\n        \r\n\r\n        if(subscriptions.length === 0){\r\n          let resp = await subscriptionsUtil.getSubscriptions();\r\n          let subscriptions = resp.subscriptions;\r\n          \r\n          dispatch({\r\n            type : \"LoadSubscriptions\",\r\n            payload : subscriptions\r\n          })\r\n        }\r\n      })();\r\n    }, []);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n        {userFullName !== '' ? <Header userFullName={userFullName} /> : userFullName}\r\n          \r\n      <Switch>\r\n        <Route exact path=\"/\" component={Welcome}/>\r\n        <Route path=\"/login\" component={Login}/>\r\n        <Route path=\"/createAccount\" component={createAccount}/>\r\n        <Route path=\"/main\" component={Main}/>\r\n        <Route path=\"/movies\" component={Movies}/>\r\n        <Route path=\"/addMovie\" component={AddMovie}/>\r\n        <Route path=\"/movie/:id\" component={EditMovie}/>\r\n        <Route path=\"/subscriptions\" component={MembersSubscriptions}/>\r\n        <Route path=\"/subscription/:id\" component={EditMember}/>\r\n        <Route path=\"/addMember\" component={AddMember}/>\r\n        <Route path=\"/users\" component={Users}/>\r\n        <Route path=\"/addUser\" component={AddUser}/>\r\n        <Route path=\"/user/:id\" component={EditUser}/>\r\n\r\n        <Route path=\"/nis\" component={permissions}/>\r\n        <Route path=\"/nis1\" component={permissions1}/>\r\n        \r\n      </Switch>\r\n     \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","C:\\mern_course\\FSFinalProject1\\CinemaFE\\cinemaapp\\src\\reportWebVitals.js",[],"C:\\mern_course\\FSFinalProject1\\CinemaFE\\cinemaapp\\src\\Components\\movies\\MoviesComp.js",["173","174","175"],"import React, { useState, useEffect } from 'react';\r\nimport { useSelector } from 'react-redux';\r\n\r\nimport MovieComp from './MovieComp';\r\nimport MovieMenu from './menu/MovieMenu';\r\n\r\nfunction MoviesComp() {\r\n    const movies = useSelector( state => state.movies);\r\n\r\n        const [searchMovie, setSearchMovie] = useState('');\r\n    const [movieResult, setMoviesResult] = useState(movies)\r\n    \r\n    const search = (e) =>{\r\n        let search = e.target.value;\r\n\r\n        let result = movies.filter(m => m.name.toLowerCase().indexOf(search.toLowerCase()) > -1);\r\n        setMoviesResult(result);\r\n    }    \r\n\r\n    return (\r\n        \r\n      <div className=\"App\">\r\n        <MovieMenu/>\r\n        <input type=\"text\"  onChange={e => search(e)}></input>\r\n\r\n        All Movies:\r\n\r\n        <div>\r\n            {\r\n                movieResult.map(movie =>{\r\n                    return <MovieComp key={movie._id} movie={movie}/>\r\n                })\r\n            }\r\n\r\n        </div>\r\n    </div>\r\n    );\r\n  }\r\n  \r\n  export default MoviesComp;","C:\\mern_course\\FSFinalProject1\\CinemaFE\\cinemaapp\\src\\Redux\\reducer.js",["176","177"],"import { act } from '@testing-library/react';\r\nimport movieUtil from '../../src/Utils/movieUtil';\r\n\r\nfunction reducer(state = { users : [], movies : [], members : [], subscriptions : [], membersSubscriptions: [], counter: 0, userFullName: '', msg: ''}, action){\r\n    let currentUsers = state.users;\r\n    let newUsersArr = null;\r\n    \r\n    let currentMovies = state.movies;\r\n    let newMoviesArr = null;\r\n    \r\n    let currentMembers = state.members;\r\n    let newMembersArr = null;\r\n\r\n    let currentMembersSubscriptions = state.membersSubscriptions;\r\n    let newMembersSubscriptionsArr = null;\r\n\r\n    let currentSubscriptions = state.subscriptions;\r\n    let newSubscriptionsArr = null;\r\n\r\n    switch (action.type){\r\n        case 'LoadData':\r\n         //   let movies = action.payload;\r\n           // let movies3 = movies.slice(0, 2);\r\n          // console.log(' mpvies in payload')\r\n\r\n           // console.table(movies);\r\n\r\n         //       let currentMovies = state.movies;\r\n           //     currentMovies = currentMovies.concat(movies)\r\n            //    console.log('all movies after we load')\r\n             //   console.log(currentMovies)\r\n\r\n                return { ...state, movies: currentMovies};\r\n        case 'LoadUsers':\r\n            let users = action.payload;\r\n            newUsersArr = [...currentUsers, ...users];\r\n\r\n            return {...state, users : newUsersArr};\r\n\r\n        case 'LoadMovies':\r\n            let movies = action.payload;\r\n            newMoviesArr = [...currentMovies, ...movies];\r\n\r\n            return {...state, movies : newMoviesArr};\r\n\r\n        case 'LoadMembers':\r\n            let members = action.payload;\r\n            newMembersArr = [...currentMembers, ...members];\r\n\r\n            return {...state, members : newMembersArr};\r\n        \r\n        case 'LoadMembersSubscriptions':\r\n            let membersSubscriptions = action.payload;\r\n            newMembersSubscriptionsArr = [...currentMembersSubscriptions, ...membersSubscriptions];\r\n\r\n            return {...state, membersSubscriptions : newMembersSubscriptionsArr};\r\n\r\n        \r\n        case 'LoadSubscriptions':\r\n            let subscriptions = action.payload;\r\n            newSubscriptionsArr = [...currentSubscriptions, ...subscriptions];\r\n\r\n            return {...state, subscriptions : newSubscriptionsArr};\r\n            \r\n        case 'AddUser':\r\n            let newUser = action.payload;\r\n            newUsersArr = [...currentUsers, newUser];\r\n\r\n            return {...state, users : newUsersArr};\r\n            \r\n        case 'DeleteUser':\r\n            let userId = action.payload;\r\n            let updatedUsers = currentUsers.filter(u => u.id !== userId);\r\n\r\n            return {...state, users : updatedUsers};\r\n\r\n        case 'UpdateUser':\r\n            let updatedUser = action.payload;\r\n            let userToUpdateIndx = currentUsers.findIndex(user => user.id === action.payload.id)\r\n            if(userToUpdateIndx > -1){\r\n                currentUsers[userToUpdateIndx] = updatedUser\r\n            }\r\n            \r\n            return {...state, users : currentUsers};\r\n\r\n        case 'AddMovie':\r\n            let newMovie = action.payload;\r\n            newMoviesArr = [...currentMovies, newMovie];\r\n\r\n            return {...state, movies : newMoviesArr};\r\n\r\n        case 'UpdateMovie':\r\n            let updatedMovie = action.payload;\r\n            let movieToUpdateIndx = currentMovies.findIndex(movie => movie._id === updatedMovie._id)\r\n            if(movieToUpdateIndx > -1){\r\n                currentMovies[movieToUpdateIndx] = updatedMovie;\r\n            }\r\n            \r\n            return {...state, movies : currentMovies};\r\n\r\n        case 'DeleteMovie':\r\n            let movieId = action.payload;\r\n            let updatedMovies = currentMovies.filter(m => m._id !== movieId);\r\n    \r\n            return {...state, movies : updatedMovies};\r\n\r\n        case 'AddMember':\r\n            /*\r\n            let newMember = action.payload;\r\n            newMembersArr = [...currentMembers, newMember];\r\n\r\n            return {...state, members : newMembersArr};\r\n            */\r\n\r\n            let newMember = action.payload;\r\n            let newMemberSubscription = {\r\n                'id' : newMember._id,\r\n                'name' : newMember.name,\r\n                'email' : newMember.email,\r\n                'city' : newMember.city,\r\n                'movies' : [],\r\n                'unwatched' : []\r\n            }\r\n            newMembersSubscriptionsArr = [...currentMembersSubscriptions, newMemberSubscription];\r\n            return {...state, membersSubscriptions : newMembersSubscriptionsArr};\r\n\r\n        case 'UpdateMember':\r\n            let updatedMember = action.payload;\r\n            let memberToUpdateIndx = currentMembersSubscriptions.findIndex(cms => cms.id === updatedMember.id)\r\n            if(memberToUpdateIndx > -1){\r\n                currentMembersSubscriptions[memberToUpdateIndx] = updatedMember;\r\n            }\r\n            \r\n            return {...state, membersSubscriptions : currentMembersSubscriptions};\r\n        \r\n        case 'UpdateMsg':\r\n            let newMsg = action.payload;\r\n             return {...state, msg: newMsg}\r\n\r\n        case 'updateUserFullName':\r\n            let userFullName = action.payload;\r\n\r\n            return { ...state, userFullName: userFullName};\r\n        default: \r\n            return state;\r\n    }\r\n}\r\n\r\nexport default reducer;","C:\\mern_course\\FSFinalProject1\\CinemaFE\\cinemaapp\\src\\Utils\\movieUtil.js",["178"],"import axios from 'axios';\r\n\r\nconst moviesUrl = 'http://localhost:5000/api/movies/';\r\n                   \r\nconst loadMovies = async() =>{\r\n    let resp = await axios.get(moviesUrl);\r\n    return resp.data;\r\n}\r\n\r\nconst addMovie = async (newMovie) =>{\r\n    let resp = {};\r\n    try{\r\n        resp = await axios.post(moviesUrl, newMovie);\r\n        \r\n    }\r\n    catch(err){\r\n        console.log(`An Error occured while try to add new movie: ${err}`);\r\n        resp.data = {\r\n            succrss : false,\r\n            msg : 'An Error occured while try to add new movie'\r\n        }\r\n\r\n        console.log(resp.data)\r\n    }\r\n\r\n    return resp.data;\r\n}\r\n\r\nconst updateMovie = async (updatedMovie) =>{\r\n    let resp = {};\r\n    \r\n    try{\r\n        resp = await axios.put(moviesUrl, updatedMovie);\r\n    }\r\n    catch(err){\r\n        console.log(`An Error occured while try to update movie: ${err}`);\r\n        resp.data = {\r\n            succrss : false,\r\n            msg : 'An Error occured while try to update movie'\r\n        }\r\n\r\n        //console.log(resp.data)\r\n    }\r\n\r\n    return resp.data;\r\n}\r\n\r\nconst deleteMovie = async (id) =>{\r\n    let resp = await axios.delete(`${moviesUrl}${id}`);\r\n    return resp.data;\r\n}\r\n\r\nexport default { loadMovies, addMovie, updateMovie, deleteMovie };","C:\\mern_course\\FSFinalProject1\\CinemaFE\\cinemaapp\\src\\Components\\CompA.js",["179"],"import React  from 'react';\r\nimport {useDispatch} from 'react-redux';\r\n\r\nimport CompB from '../Components/CompB'\r\nimport CompC from '../Components/CompC'\r\n\r\nfunction CompA(props) {\r\n    const dispatch = useDispatch();\r\n    \r\n      \r\n     \r\n    return (\r\n        \r\n      <div className=\"App\">\r\n    \r\nComp A\r\n        <div>\r\n     \r\n        <button onClick={ () =>{\r\n            console.log(\"in counter\")\r\n            dispatch({\r\n                type : \"LoadData\"\r\n            })\r\n        } }>+</button>\r\n\r\n        <br/>\r\n\r\n        <CompC/>\r\n\r\n        </div>\r\n    \r\n\r\n\r\n        \r\n      </div>\r\n    );\r\n  }\r\n  \r\n  export default CompA;",["180","181"],"C:\\mern_course\\FSFinalProject1\\CinemaFE\\cinemaapp\\src\\Components\\CompB.js",[],"C:\\mern_course\\FSFinalProject1\\CinemaFE\\cinemaapp\\src\\Components\\CompC.js",[],"C:\\mern_course\\FSFinalProject1\\CinemaFE\\cinemaapp\\src\\Components\\WelcomeComp.js",[],"C:\\mern_course\\FSFinalProject1\\CinemaFE\\cinemaapp\\src\\Components\\LoginComp.js",[],"C:\\mern_course\\FSFinalProject1\\CinemaFE\\cinemaapp\\src\\Components\\MainComp.js",["182"],"import React from 'react';\r\n\r\nimport usersUtil from '../Utils/usersUtil';\r\n\r\nimport Header from '../Components/HeaderComp';\r\nimport Movies from '../Components/movies/MoviesComp';\r\n\r\nfunction MainComp() {\r\n\r\n async function test(){\r\n    let token = sessionStorage.getItem(\"user\");\r\n    /*let test ={\r\n      foo: \"foo\"\r\n  }*/\r\n\r\n  let resp = await usersUtil.test(token);\r\n  \r\n  if(resp.success){\r\n      console({resp})\r\n  }\r\n  else{\r\n    console.log(\"ERRor\")\r\n  }\r\n\r\n  }\r\n\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      {sessionStorage.getItem(\"userName\") ? <Header userName={sessionStorage.getItem(\"userName\")}/> : ''}\r\n      <h1>Main page</h1>\r\n\r\n\r\n\r\n\r\n<button type=\"button\" onClick={test} >test</button>\r\n\r\n      \r\n    </div>\r\n  );\r\n}\r\n  \r\n  export default MainComp;","C:\\mern_course\\FSFinalProject1\\CinemaFE\\cinemaapp\\src\\Utils\\usersUtil.js",["183"],"import axios from 'axios';\r\nconst usersUrl = \"http://localhost:5000/api/users/\";\r\n\r\nconst login = async (userLogin) =>{\r\n    console.log(userLogin)    \r\n    let resp = await axios.post(`${usersUrl}login`, userLogin);\r\n//console.log(resp)\r\n    return resp.data;\r\n}\r\n\r\nconst createAccount = async (createdUser) =>{\r\n    let resp = await axios.post(`${usersUrl}createAccount`, createdUser);\r\n    return resp.data;\r\n}\r\n\r\nconst addUser = async (newUser) =>{\r\n    let resp = await axios.post(`${usersUrl}add`, newUser);\r\n    return resp.data;\r\n}\r\n\r\nconst deleteUser = async (id) =>{\r\n    let resp = await axios.delete(`${usersUrl}${id}`);\r\n    return resp.data;\r\n}\r\n\r\nconst updateUser = async(updatedUser) =>{\r\n    let resp = await axios.put(usersUrl, updatedUser);\r\n    return resp.data;\r\n}\r\n\r\nconst getUsers = async () =>{\r\n    let resp = await axios.get(`${usersUrl}`);\r\n    return resp.data;\r\n}\r\n\r\n\r\n\r\nconst test = async (token) =>{\r\n\r\n   // console.log(test)    \r\n    let resp = await axios.post(`${usersUrl}test`, token, {headers: {\"Authorization\" : `Bearer ${token}`}});\r\n//console.log(resp)\r\n    return resp.data;\r\n}\r\n\r\nexport default {login, createAccount, addUser, test, getUsers, deleteUser, updateUser};","C:\\mern_course\\FSFinalProject1\\CinemaFE\\cinemaapp\\src\\Components\\HeaderComp.js",["184","185"],"import React, { useState, useEffect } from 'react'\r\nimport './HeaderComp.css';\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\n\r\n\r\nfunction HeaderComp(props){\r\n    \r\n    return(\r\n        <div>\r\n            <ul>\r\n                <li>logo</li>&nbsp;&nbsp;\r\n                <li><Link to='movies'>Movies</Link></li>&nbsp;&nbsp;\r\n                <li><Link to='subscriptions'>Subscriptions</Link></li>&nbsp;&nbsp;\r\n                <li><Link to='users'>User's Management</Link></li>&nbsp;&nbsp;\r\n                <li>{props.userFullName !== '' ? `Hello ${props.userFullName}` : ''}</li>&nbsp;&nbsp;\r\n            </ul>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default HeaderComp;","C:\\mern_course\\FSFinalProject1\\CinemaFE\\cinemaapp\\src\\Components\\subscriptions\\MembersComp.js",[],"C:\\mern_course\\FSFinalProject1\\CinemaFE\\cinemaapp\\src\\Components\\users\\AddUserComp.js",["186"],"import React, {useState} from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useHistory, Link } from 'react-router-dom';\r\nimport FormGroup from '@material-ui/core/FormGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\n\r\nimport { useFormik } from 'formik';\r\nimport * as Yup from 'yup';\r\n\r\nimport UserMenu from './menu/UserMenu';\r\nimport usersUtil from '../../Utils/usersUtil';\r\n\r\nfunction AddUserComp() {\r\n    //const [msg, setMsg] = useState('');\r\n    const msg = useSelector(state => state.msg);\r\n\r\n    const history = useHistory();\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const formik = useFormik({\r\n        /*enableReinitialize : true,*/\r\n        \r\n        initialValues: {\r\n            firstName: '',\r\n            lastName: '',\r\n            username: '',\r\n            sessionTimeOut: 0,\r\n            permissions: [],\r\n        },\r\n        validationSchema: Yup.object({\r\n            firstName: Yup.string()\r\n              .min(2, 'Too Short!')\r\n              .max(50, 'Too Long!')\r\n              .required('Required'),\r\n            lastName: Yup.string()\r\n              .min(2, 'Too Short!')\r\n              .max(50, 'Too Long!')\r\n              .required('Required'),\r\n            username: Yup.string()\r\n              .min(3, 'Too Short!')\r\n              .max(10, 'Too Long!')\r\n              .required('Required'),\r\n            sessionTimeOut: Yup.number()\r\n              .min(1, 'Must be more than 0 sec')\r\n              .max(60, 'Must be less than 60 sec')\r\n              .integer()\r\n              .positive()\r\n              .required('Required'),\r\n            permissions: Yup.array().min(1, 'Choose at list one permission')\r\n            \r\n            \r\n            }),\r\n        onSubmit: async (values) => {\r\n            let resp = await usersUtil.addUser(values);\r\n\r\n            if(resp.success){\r\n                values.id = resp.id;\r\n                \r\n                dispatch({\r\n                    type: \"AddUser\",\r\n                    payload: values\r\n                })\r\n\r\n                dispatch({\r\n                    type: \"UpdateMsg\",\r\n                    payload: resp.msg\r\n                })\r\n\r\n                history.push('/users');\r\n            }\r\n            else{\r\n                dispatch({\r\n                    type: \"UpdateMsg\",\r\n                    payload: resp.msg\r\n                })\r\n            }\r\n            \r\n            // setMsg(resp.msg);\r\n        },\r\n    });\r\n\r\n    const handleChange = (e) =>{\r\n        formik.handleChange(e);\r\n        const {name, checked, value} = e.target;\r\n        let userPermissions = formik.values.permissions;\r\n\r\n       // console.log('name, checked' , name, checked, value);\r\n      //  console.log('values' , formik.values);\r\n\r\n        if(name === 'createSubscriptions' || name === 'deleteSubscriptions' || name === 'updateSubscriptions'){\r\n            if(checked){\r\n                userPermissions = [...userPermissions, value];\r\n\r\n                if(!userPermissions.includes('View Subscriptions')){\r\n                    userPermissions = [...userPermissions, 'View Subscriptions'];\r\n                }\r\n            }\r\n            else{\r\n                userPermissions = userPermissions.filter(p => p !== value);\r\n                if(!userPermissions.includes('Create Subscriptions') && !userPermissions.includes('Delete Subscriptions') && !userPermissions.includes('Update Subscriptions')){\r\n                    userPermissions = userPermissions.filter(p => p !== 'View Subscriptions');\r\n                }\r\n            }\r\n        }\r\n        else if(name === 'createMovies' || name === 'deleteMovies' || name === 'updateMovies'){\r\n            if(checked){\r\n                userPermissions = [...userPermissions, value];\r\n\r\n                if(!userPermissions.includes('View Movies')){\r\n                    userPermissions = [...userPermissions, 'View Movies'];\r\n                }\r\n            }\r\n            else{\r\n                userPermissions = userPermissions.filter(p => p !== value);\r\n                if(!userPermissions.includes('Create Movies') && !userPermissions.includes('Delete Movies') && !userPermissions.includes('Update Movies')){\r\n                    userPermissions = userPermissions.filter(p => p !== 'View Movies');\r\n                }\r\n            }\r\n        }\r\n        else if(name === 'viewSubscriptions'){\r\n            if(checked){\r\n                userPermissions = [...userPermissions, value];\r\n            }\r\n            else{\r\n                userPermissions = userPermissions.filter(p => p.indexOf('S') === -1);\r\n            }\r\n        }\r\n        else if(name === 'viewMovies'){\r\n            if(checked){\r\n                userPermissions = [...userPermissions, value];\r\n\r\n            }\r\n            else{\r\n                userPermissions = userPermissions.filter(p => p.indexOf('M') === -1);\r\n            }\r\n        }\r\n\r\n        formik.setFieldValue('permissions', userPermissions);\r\n       // console.log('values' , formik.values);\r\n    }\r\n\r\n    return(\r\n        <React.Fragment>\r\n             <UserMenu/>\r\n            {msg}\r\n            <form onSubmit={formik.handleSubmit}>\r\n                \r\n                <label htmlFor='firstName'>First Name</label>\r\n                <input\r\n                    id='firstName'\r\n                    name='firstName'\r\n                    type='text'\r\n                    onChange={formik.handleChange}\r\n                    value={formik.values.firstName}\r\n                />\r\n                {formik.touched.firstName && formik.errors.firstName ? (\r\n                    <div>{formik.errors.firstName}</div>\r\n                ) : null}\r\n                <br/>\r\n\r\n                <label htmlFor='lastName'>Last Name</label>\r\n                <input\r\n                    id='lastName'\r\n                    name='lastName'\r\n                    type='text'\r\n                    onChange={formik.handleChange}\r\n                    value={formik.values.lastName}\r\n                />\r\n                {formik.touched.lastName && formik.errors.lastName ? (\r\n                    <div>{formik.errors.lastName}</div>\r\n                ) : null}\r\n                <br/>\r\n\r\n                <label htmlFor='userName'>UserName</label>\r\n                <input\r\n                    id='username'\r\n                    name='username'\r\n                    type='text'\r\n                    onChange={formik.handleChange}\r\n                    value={formik.values.username}\r\n                />\r\n                {formik.touched.username && formik.errors.username ? (\r\n                    <div>{formik.errors.username}</div>\r\n                ) : null}\r\n                <br/>\r\n\r\n                <label htmlFor='sessionTimeOut'>Session Time Out</label>\r\n                <input\r\n                    id='sessionTimeOut'\r\n                    name='sessionTimeOut'\r\n                    type='text'\r\n                    onChange={formik.handleChange}\r\n                    value={formik.values.sessionTimeOut}\r\n                />\r\n                {formik.touched.sessionTimeOut && formik.errors.sessionTimeOut ? (\r\n                    <div>{formik.errors.sessionTimeOut}</div>\r\n                ) : null}\r\n                <br/>\r\n\r\n\r\n                Permission: <br/>\r\n                    \r\n                <FormGroup row>\r\n                    <FormControlLabel\r\n                        control={<Checkbox checked={formik.values.permissions.includes('View Subscriptions')}  onChange={handleChange} id='viewSubscriptions' name='viewSubscriptions' value='View Subscriptions' size='small' style ={{\r\n                            color: 'white', \r\n                            }}\r\n                                />}\r\n                        label='View Subscriptions'\r\n                    />\r\n\r\n                    <FormControlLabel\r\n                        control={<Checkbox checked={formik.values.permissions.includes('Create Subscriptions')} onChange={handleChange} id='createSubscriptions' name='createSubscriptions' value='Create Subscriptions' size='small' style ={{\r\n                            color: 'white', \r\n                            }}\r\n                                />}\r\n                        label='Create Subscriptions'\r\n                    />\r\n\r\n                    <FormControlLabel\r\n                        control={<Checkbox checked={formik.values.permissions.includes('Delete Subscriptions')} onChange={handleChange} id='deleteSubscriptions' name='deleteSubscriptions' value='Delete Subscriptions' size='small' style ={{\r\n                            color: 'white', \r\n                            }}\r\n                                />}\r\n                        label='Delete Subscriptions'\r\n                    />\r\n\r\n                    <FormControlLabel\r\n                        control={<Checkbox checked={formik.values.permissions.includes('Update Subscriptions')} onChange={handleChange} id='updateSubscriptions' name='updateSubscriptions' value='Update Subscriptions' size='small' style ={{\r\n                            color: 'white', \r\n                            }}\r\n                                />}\r\n                        label='Update Subscriptions'\r\n                    />\r\n\r\n                    <FormControlLabel\r\n                        control={<Checkbox checked={formik.values.permissions.includes('View Movies')} onChange={handleChange} id='viewMovies' name='viewMovies' value='View Movies' size='small' style ={{\r\n                            color: 'white', \r\n                            }}\r\n                                />}\r\n                        label='View Movies'\r\n                    />\r\n\r\n                    <FormControlLabel\r\n                        control={<Checkbox checked={formik.values.permissions.includes('Create Movies')} onChange={handleChange} id='createMovies' name='createMovies' value='Create Movies' size='small' style ={{\r\n                            color: 'white', \r\n                            }}\r\n                                />}\r\n                        label='Create Movies'\r\n                    />\r\n\r\n                    <FormControlLabel\r\n                        control={<Checkbox checked={formik.values.permissions.includes('Delete Movies')} onChange={handleChange} id='deleteMovies' name='deleteMovies' value='Delete Movies' size='small' style ={{\r\n                            color: 'white', \r\n                            }}\r\n                                />}\r\n                        label='Delete Movies'\r\n                    />\r\n\r\n                    <FormControlLabel\r\n                        control={<Checkbox checked={formik.values.permissions.includes('Update Movies')} onChange={handleChange} id='updateMovies' name='updateMovies' value='Update Movies' size='small' style ={{\r\n                            color: 'white', \r\n                            }}\r\n                                />}\r\n                        label='Update Movies'\r\n                    />\r\n                </FormGroup>\r\n                \r\n                {formik.touched.permissions && formik.errors.permissions ? (\r\n                    <div>{formik.errors.permissions}</div>\r\n                ) : null}\r\n\r\n                <button type='submit'>Submit</button>\r\n                <button><Link to=\"/users\">Cancel</Link></button>\r\n            </form>\r\n        </React.Fragment>\r\n    )\r\n}\r\nexport default AddUserComp;\r\n","C:\\mern_course\\FSFinalProject1\\CinemaFE\\cinemaapp\\src\\Components\\users\\CreateAccountComp.js",[],"C:\\mern_course\\FSFinalProject1\\CinemaFE\\cinemaapp\\src\\Components\\customField\\PermossionComp.js",["187"],"import React from 'react';\r\nimport { Formik, Field, Form } from 'formik';\r\nimport { computeHeadingLevel } from '@testing-library/react';\r\n\r\n\r\nfunction PermossionComp(props) {\r\n\r\n    const handleChange = (checked) =>{\r\n        console.log(checked)\r\n    }\r\n   \r\n    return (\r\n        <Formik\r\n            initialValues={{\r\n                checked: [],\r\n            }}\r\n            onSubmit={(values) => {\r\n                alert(values.checked);\r\n            }}\r\n            \r\n        >\r\n            \r\n        {({ values, onChange }) => (\r\n            \r\n            <Form>\r\n               \r\n                <div id=\"checkbox-group\">Checked</div>\r\n                <div role=\"group\" aria-labelledby=\"checkbox-group\"  >\r\n                    <label>\r\n                    <Field type=\"checkbox\" name=\"checked\" value=\"One\" handleChange={handleChange} />\r\n                    One\r\n                    </label>\r\n                    <label>\r\n                    <Field type=\"checkbox\" name=\"checked\" value=\"Two\" />\r\n                    Two\r\n                    </label>\r\n                    <label>\r\n                    <Field type=\"checkbox\" name=\"checked\" value=\"Three\" />\r\n                    Three\r\n                    </label>\r\n                </div>\r\n\r\n                <button type=\"submit\">Submit</button>\r\n\r\n            </Form>\r\n        )}\r\n            \r\n        </Formik>\r\n    )\r\n}\r\n\r\nexport default PermossionComp\r\n","C:\\mern_course\\FSFinalProject1\\CinemaFE\\cinemaapp\\src\\Components\\customField\\PermossionComp1.js",[],"C:\\mern_course\\FSFinalProject1\\CinemaFE\\cinemaapp\\src\\Components\\users\\UsersComp.js",[],"C:\\mern_course\\FSFinalProject1\\CinemaFE\\cinemaapp\\src\\Components\\users\\UserComp.js",["188","189"],"import React, {useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport usersUtil from '../../Utils/usersUtil';\r\n\r\nimport './UserComp.css';\r\n\r\nfunction UserComp(props) {\r\n    const [msg, setMsg] = useState('');\r\n    const dispatch = useDispatch();\r\n\r\n    const deleteUser = async (id) =>{\r\n        let response = await usersUtil.deleteUser(id);\r\n        if(response.success){\r\n            dispatch({\r\n                type: \"DeleteUser\",\r\n                payload: id\r\n            })\r\n        }\r\n        else{\r\n            dispatch({\r\n                type: \"UpdateMsg\",\r\n                payload: response.msg\r\n            })\r\n        }\r\n    }\r\n    return (\r\n        \r\n        <div className='user'>\r\n            name: {props.user.firstName} {props.user.lastName}<br/>\r\n            usernme: {props.user.username}<br/>\r\n            SessionTimeout: {props.user.sessionTimeOut}<br/>\r\n            Created Date : {props.user.createdDate}<br/>\r\n            permissions : \r\n            {\r\n                props.user.permissions.map((p, i) =>{\r\n                    let permissionLen = props.user.permissions.length;\r\n                    if(i !== permissionLen-1){\r\n                        return (' ' + p + ',');\r\n                    }\r\n                    else{\r\n                        return (' ' + p);\r\n                    }\r\n                    \r\n                })\r\n            }\r\n            <br/>\r\n            \r\n            <button><Link to={`/user/${props.user.id}`}>Edit</Link></button>\r\n            <input type=\"button\" value=\"Delete\" onClick={() => deleteUser(props.user.id)}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default UserComp\r\n","C:\\mern_course\\FSFinalProject1\\CinemaFE\\cinemaapp\\src\\Components\\users\\EditUserComp.js",["190"],"import React, { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useHistory, Link } from 'react-router-dom';\r\nimport FormGroup from '@material-ui/core/FormGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\n\r\nimport { useFormik } from 'formik';\r\nimport * as Yup from 'yup';\r\n\r\nimport UserMenu from './menu/UserMenu';\r\nimport usersUtil from '../../Utils/usersUtil';\r\n\r\nfunction EditUserComp(props) {\r\n    const [user, setUser] = useState(null);\r\n    const users = useSelector(state => state.users);\r\n    const msg = useSelector(state => state.msg);\r\n\r\n    useEffect(() => {\r\n        let userId = props.match.params.id;\r\n        let user = users.filter(u => u.id === userId)[0];\r\n\r\n        let fields = ['firstName', 'lastName', 'username', 'sessionTimeOut', 'permissions'];\r\n\r\n        fields.forEach(field => formik.setFieldValue(field, user[field]));\r\n\r\n        setUser(user);\r\n        \r\n    }, [])\r\n\r\n    const history = useHistory();\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const formik = useFormik({\r\n        \r\n        initialValues: {\r\n            firstName: user ? user.firstName : '',\r\n            lastName: user ? user.lastName : '',\r\n            username: user ? user.username : '',\r\n            sessionTimeOut: user ? user.sessionTimeOut : 0,\r\n            permissions: user ? user.permissions: [],\r\n        },\r\n        validationSchema: Yup.object({\r\n            firstName: Yup.string()\r\n              .min(2, 'Too Short!')\r\n              .max(50, 'Too Long!')\r\n              .required('Required'),\r\n            lastName: Yup.string()\r\n              .min(2, 'Too Short!')\r\n              .max(50, 'Too Long!')\r\n              .required('Required'),\r\n            username: Yup.string()\r\n              .min(3, 'Too Short!')\r\n              .max(10, 'Too Long!')\r\n              .required('Required'),\r\n            sessionTimeOut: Yup.number()\r\n              .min(1, 'Must be more than 0 sec')\r\n              .max(60, 'Must be less than 60 sec')\r\n              .integer()\r\n              .positive()\r\n              .required('Required'),\r\n            permissions: Yup.array().min(1, 'Choose at list one permission')\r\n            }),\r\n        onSubmit: async (values) => {\r\n            let updatedUser = {\r\n                'id': user.id,\r\n                'firstName' : values.firstName,\r\n                'lastName' : values.lastName,\r\n                'username' : values.username,\r\n                'sessionTimeOut' : values.sessionTimeOut,\r\n                'permissions' : values.permissions\r\n            }\r\n\r\n            let resp = await usersUtil.updateUser(updatedUser);\r\n\r\n            if(resp.success){\r\n                dispatch({\r\n                    type: \"UpdateUser\",\r\n                    payload: updatedUser\r\n                })\r\n\r\n                dispatch({\r\n                    type: \"UpdateMsg\",\r\n                    payload: resp.msg\r\n                })\r\n\r\n                history.push('/users');\r\n            }\r\n            else{\r\n                dispatch({\r\n                    type: \"UpdateMsg\",\r\n                    payload: resp.msg\r\n                })\r\n            }\r\n            \r\n        },\r\n    });\r\n\r\n    const handleChange = (e) =>{\r\n        formik.handleChange(e);\r\n        const {name, checked, value} = e.target;\r\n        let userPermissions = formik.values.permissions;\r\n\r\n        if(name === 'createSubscriptions' || name === 'deleteSubscriptions' || name === 'updateSubscriptions'){\r\n            if(checked){\r\n                userPermissions = [...userPermissions, value];\r\n\r\n                if(!userPermissions.includes('View Subscriptions')){\r\n                    userPermissions = [...userPermissions, 'View Subscriptions'];\r\n                }\r\n            }\r\n            else{\r\n                userPermissions = userPermissions.filter(p => p !== value);\r\n                if(!userPermissions.includes('Create Subscriptions') && !userPermissions.includes('Delete Subscriptions') && !userPermissions.includes('Update Subscriptions')){\r\n                    userPermissions = userPermissions.filter(p => p !== 'View Subscriptions');\r\n                }\r\n            }\r\n        }\r\n        else if(name === 'createMovies' || name === 'deleteMovies' || name === 'updateMovies'){\r\n            if(checked){\r\n                userPermissions = [...userPermissions, value];\r\n\r\n                if(!userPermissions.includes('View Movies')){\r\n                    userPermissions = [...userPermissions, 'View Movies'];\r\n                }\r\n            }\r\n            else{\r\n                userPermissions = userPermissions.filter(p => p !== value);\r\n                if(!userPermissions.includes('Create Movies') && !userPermissions.includes('Delete Movies') && !userPermissions.includes('Update Movies')){\r\n                    userPermissions = userPermissions.filter(p => p !== 'View Movies');\r\n                }\r\n            }\r\n        }\r\n        else if(name === 'viewSubscriptions'){\r\n            if(checked){\r\n                userPermissions = [...userPermissions, value];\r\n            }\r\n            else{\r\n                userPermissions = userPermissions.filter(p => p.indexOf('S') === -1);\r\n            }\r\n        }\r\n        else if(name === 'viewMovies'){\r\n            if(checked){\r\n                userPermissions = [...userPermissions, value];\r\n\r\n            }\r\n            else{\r\n                userPermissions = userPermissions.filter(p => p.indexOf('M') === -1);\r\n            }\r\n        }\r\n\r\n        formik.setFieldValue('permissions', userPermissions);\r\n    }\r\n\r\n    return(\r\n        <React.Fragment>\r\n             <UserMenu/>\r\n             {msg}\r\n            <form onSubmit={formik.handleSubmit}>\r\n\r\n            <label htmlFor='firstName'>First Name</label>\r\n                <input\r\n                    id='firstName'\r\n                    name='firstName'\r\n                    type='text'\r\n                    onChange={formik.handleChange}\r\n                    value={formik.values.firstName}\r\n                />\r\n                {formik.touched.firstName && formik.errors.firstName ? (\r\n                    <div>{formik.errors.firstName}</div>\r\n                ) : null}\r\n                \r\n                <br/>\r\n\r\n                <label htmlFor='lastName'>Last Name</label>\r\n                <input\r\n                    id='lastName'\r\n                    name='lastName'\r\n                    type='text'\r\n                    onChange={formik.handleChange}\r\n                    value={formik.values.lastName}\r\n                />\r\n                {formik.touched.lastName && formik.errors.lastName ? (\r\n                    <div>{formik.errors.lastName}</div>\r\n                ) : null}\r\n                <br/>\r\n\r\n                <label htmlFor='username'>UserName</label>\r\n                <input\r\n                    id='username'\r\n                    name='username'\r\n                    type='text'\r\n                    onChange={formik.handleChange}\r\n                    value={formik.values.username}\r\n                />\r\n                {formik.touched.username && formik.errors.username ? (\r\n                    <div>{formik.errors.username}</div>\r\n                ) : null}\r\n                <br/>\r\n\r\n                <label htmlFor='sessionTimeOut'>Session Time Out</label>\r\n                <input\r\n                    id='sessionTimeOut'\r\n                    name='sessionTimeOut'\r\n                    type='text'\r\n                    onChange={formik.handleChange}\r\n                    value={formik.values.sessionTimeOut}\r\n                />\r\n                {formik.touched.sessionTimeOut && formik.errors.sessionTimeOut ? (\r\n                    <div>{formik.errors.sessionTimeOut}</div>\r\n                ) : null}\r\n                <br/>\r\n\r\n\r\n                Permission: <br/>\r\n                    \r\n                <FormGroup row>\r\n                    <FormControlLabel\r\n                        control={<Checkbox value='View Subscriptions' checked={formik.values.permissions.includes('View Subscriptions')}  onChange={handleChange} id='viewSubscriptions' name='viewSubscriptions' size='small' style ={{\r\n                            color: 'white', \r\n                            }}\r\n                                />}\r\n                        label='View Subscriptions'\r\n                    />\r\n\r\n                    <FormControlLabel\r\n                        control={<Checkbox value='Create Subscriptions' checked={formik.values.permissions.includes('Create Subscriptions')} onChange={handleChange} id='createSubscriptions' name='createSubscriptions' size='small' style ={{\r\n                            color: 'white', \r\n                            }}\r\n                                />}\r\n                        label='Create Subscriptions'\r\n                    />\r\n\r\n                    <FormControlLabel\r\n                        control={<Checkbox value='Delete Subscriptions' checked={formik.values.permissions.includes('Delete Subscriptions')}onChange={handleChange} id='deleteSubscriptions' name='deleteSubscriptions' size='small' style ={{\r\n                            color: 'white', \r\n                            }}\r\n                                />}\r\n                        label='Delete Subscriptions'\r\n                    />\r\n\r\n                    <FormControlLabel\r\n                        control={<Checkbox value='Update Subscriptions' checked={formik.values.permissions.includes('Update Subscriptions')} onChange={handleChange} id='updateSubscriptions' name='updateSubscriptions' size='small' style ={{\r\n                            color: 'white', \r\n                            }}\r\n                                />}\r\n                        label='Update Subscriptions'\r\n                    />\r\n\r\n                    <FormControlLabel\r\n                        control={<Checkbox value='View Movies' checked={formik.values.permissions.includes('View Movies')} onChange={handleChange} id='viewMovies' name='viewMovies' size='small' style ={{\r\n                            color: 'white', \r\n                            }}\r\n                                />}\r\n                        label='View Movies'\r\n                    />\r\n                    \r\n                    <FormControlLabel\r\n                        control={<Checkbox value='Create Movies' checked={formik.values.permissions.includes('Create Movies')} onChange={handleChange} id='createMovies' name='createMovies' size='small' style ={{\r\n                            color: 'white', \r\n                            }}\r\n                                />}\r\n                        label='Create Movies'\r\n                    />\r\n\r\n                    <FormControlLabel\r\n                        control={<Checkbox value='Delete Movies' checked={formik.values.permissions.includes('Delete Movies')} onChange={handleChange} id='deleteMovies' name='deleteMovies' size='small' style ={{\r\n                            color: 'white', \r\n                            }}\r\n                                />}\r\n                        label='Delete Movies'\r\n                    />\r\n                    \r\n                    <FormControlLabel\r\n                        control={<Checkbox value='Update Movies' checked={formik.values.permissions.includes('Update Movies')} onChange={handleChange} id='updateMovies' name='updateMovies' size='small' style ={{\r\n                            color: 'white', \r\n                            }}\r\n                                />}\r\n                        label='Update Movies'\r\n                    />\r\n                    \r\n                </FormGroup>\r\n                {formik.touched.permissions && formik.errors.permissions ? (\r\n                        <div>{formik.errors.permissions}</div>\r\n                    ) : null}\r\n                \r\n\r\n\r\n                <button type='submit'>Update</button>\r\n                <button><Link to=\"/users\">Cancel</Link></button>\r\n            </form>\r\n        </React.Fragment>\r\n    )\r\n}\r\nexport default EditUserComp;\r\n","C:\\mern_course\\FSFinalProject1\\CinemaFE\\cinemaapp\\src\\Components\\movies\\MovieComp.js",["191","192","193"],"import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { useDispatch } from 'react-redux';\r\n\r\nimport './MovieComp.css';\r\nimport moviesUtil from '../../Utils/movieUtil';\r\n\r\n\r\nfunction MovieComp(props) {\r\n    const dispatch = useDispatch();\r\n\r\n    const deleteMovie = async (movieId) =>{\r\n       /* let response = await moviesUtil.deleteMovie(movieId);\r\n        if(response.success){\r\n            dispatch({\r\n                type: \"DeleteMovie\",\r\n                payload: movieId\r\n            })\r\n        }\r\n        else{\r\n            dispatch({\r\n                type: \"UpdateMsg\",\r\n                payload: response.msg\r\n            })\r\n        }*/\r\n    }\r\n\r\n    return (\r\n        <div className=\"movie\">\r\n            name: {props.movie.name} <br/>\r\n            year: {props.movie.premiered.slice(0, 4)} <br/>\r\n            genres: {props.movie.genres.join()} <br/>\r\n            image: <img className=\"imgSize\" src={props.movie.image.medium}/> <br/>\r\n            subscriptions: <br/>\r\n\r\n            <button><Link to={`/movie/${props.movie._id}`}>Edit</Link></button>\r\n            <input type=\"button\" value=\"Delete\" onClick={() => deleteMovie(props.movie._id)}/>\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MovieComp\r\n","C:\\mern_course\\FSFinalProject1\\CinemaFE\\cinemaapp\\src\\Components\\users\\menu\\UserMenu.js",[],"C:\\mern_course\\FSFinalProject1\\CinemaFE\\cinemaapp\\src\\Components\\movies\\AddMovieComp.js",["194","195","196","197","198"],"import React, { useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { useFormik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { userHistory, Link, useHistory } from 'react-router-dom';\r\nimport moment from 'moment';\r\n\r\nimport MovieMenu from './menu/MovieMenu';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { red } from '@material-ui/core/colors';\r\n\r\nimport './MovieComp.css';\r\nimport moviesUtil from '../../Utils/movieUtil';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    container: {\r\n      display: 'flex',\r\n      flexWrap: 'wrap',\r\n    },\r\n    textField: {\r\n      marginLeft: theme.spacing(1),\r\n      marginRight: theme.spacing(1),\r\n      width: 200,\r\n      \r\n    },\r\n    input: {\r\n        color: \"red\",\r\n        backgroundColor: 'white'\r\n    }\r\n  }));\r\n\r\nfunction AddMovieComp() {\r\n    const [msg, setMsg] = useState('');\r\n    const classes = useStyles();\r\n\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n   \r\n    const formik = useFormik({\r\n        initialValues: {\r\n            name: '',\r\n            genres: '',\r\n            imageUrl: '',\r\n            premiered: '',\r\n            \r\n        },\r\n        validationSchema: Yup.object({\r\n            name: Yup.string()\r\n              .min(2, 'Too Short!')\r\n              .max(50, 'Too Long!')\r\n              .required('Required'),\r\n            genres: Yup.string()\r\n              .min(3, 'Too Short!')\r\n              .max(50, 'Too Long!')\r\n              .required('Required'),\r\n            imageUrl: Yup.string()\r\n              .min(10, 'Too Short!')\r\n              .max(100, 'Too Long!')\r\n              .required('Required'),\r\n            premiered: Yup.date()\r\n              .min(new Date('01/01/1930'))\r\n              .max(new Date('01/01/2930'))                   \r\n              .required('Required'),\r\n        }),\r\n        onSubmit: async (values) => {\r\n            let genres = values.genres.split(',');\r\n            let addedMovie = {\r\n                name : values.name,\r\n                genres : genres,\r\n                image : {\r\n                    medium : values.imageUrl,\r\n                    original : ''\r\n                },\r\n                premiered : values.premiered\r\n            }\r\n\r\n            let resp = await moviesUtil.addMovie(addedMovie)\r\n            //console.log(resp.data)\r\n\r\n            if(resp.success){\r\n                addedMovie._id = resp.movieId;\r\n                \r\n                dispatch({\r\n                    type: \"AddMovie\",\r\n                    payload: addedMovie\r\n                })\r\n                formik.resetForm();\r\n                setMsg(resp.msg);\r\n\r\n                //history.push('/movies');\r\n            }\r\n            else{\r\n                setMsg(resp.msg);\r\n                \r\n            }\r\n            \r\n            // setMsg(resp.msg);\r\n        },\r\n              \r\n\r\n              \r\n\r\n    });\r\n\r\n    const handleChange = (e) =>{\r\n        formik.handleChange(e);\r\n        alert(e.target.value)\r\n        console.log(formik.values.name)\r\n        \r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <MovieMenu/>\r\n            {msg}\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <label htmlFor=\"name\">Name</label>\r\n\r\n                <input\r\n                    id=\"name\"\r\n                    type=\"text\"\r\n                    {...formik.getFieldProps('name')}\r\n                />\r\n\r\n              \r\n                {formik.touched.name && formik.errors.name ? (\r\n                    <div>{formik.errors.name}</div>\r\n                ) : null}\r\n\r\n                <br/>\r\n\r\n                <label htmlFor=\"genres\">Genres</label>\r\n                <input\r\n                    id=\"genres\"\r\n                    type=\"text\"\r\n                    {...formik.getFieldProps('genres')}\r\n                />\r\n                {formik.touched.genres && formik.errors.genres ? (\r\n                    <div>{formik.errors.genres}</div>\r\n                ) : null}\r\n\r\n                <br/>\r\n\r\n                <label htmlFor=\"imageUrl\">Image Url</label>\r\n                <input\r\n                    id=\"imageUrl\"\r\n                    type=\"text\"\r\n                    {...formik.getFieldProps('imageUrl')}\r\n                />\r\n                {formik.touched.imageUrl && formik.errors.imageUrl ? (\r\n                    <div>{formik.errors.imageUrl}</div>\r\n                ) : null}\r\n                \r\n                <br/>\r\n                <label htmlFor=\"premiered\">Premiered</label>\r\n\r\n                <TextField \r\n                    id=\"premiered\"\r\n                    label=\"Premiered\"\r\n                    type=\"date\"\r\n                    format={'dd/mm/yyyy'}\r\n                    onChange={formik.handleChange}\r\n                    {...formik.getFieldProps('premiered')}\r\n                    \r\n                    \r\n                    className={classes.input}\r\n                    \r\n                    InputLabelProps={{\r\n                    shrink: true,\r\n                    \r\n                    \r\n                    }}\r\n                    \r\n                    \r\n                />\r\n                {formik.touched.premiered && formik.errors.premiered ? (\r\n                    <div>{formik.errors.premiered}</div>\r\n                ) : null}\r\n<br/>\r\n                <button type='submit'>Submit</button>\r\n                <button><Link to=\"/movies\">Cancel</Link></button>\r\n            </form>\r\n            \r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default AddMovieComp\r\n","C:\\mern_course\\FSFinalProject1\\CinemaFE\\cinemaapp\\src\\Components\\movies\\EditMovieComp.js",["199","200","201","202","203","204","205"],"import React, { useState, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useFormik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { userHistory, Link, useHistory } from 'react-router-dom';\r\nimport moment from 'moment';\r\n\r\nimport MovieMenu from './menu/MovieMenu';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { red } from '@material-ui/core/colors';\r\n\r\nimport './MovieComp.css';\r\nimport moviesUtil from '../../Utils/movieUtil';\r\nimport movieUtil from '../../Utils/movieUtil';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    container: {\r\n      display: 'flex',\r\n      flexWrap: 'wrap',\r\n    },\r\n    textField: {\r\n      marginLeft: theme.spacing(1),\r\n      marginRight: theme.spacing(1),\r\n      width: 200,\r\n      \r\n    },\r\n    input: {\r\n        color: \"red\",\r\n        backgroundColor: 'white'\r\n    }\r\n  }));\r\n\r\nfunction EditMovieComp(props) {\r\n    const [msg, setMsg] = useState('');\r\n    const [movie, setMovie] = useState(null);\r\n    const movies = useSelector(state => state.movies);\r\n\r\n    const classes = useStyles();\r\n\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            name: '',\r\n            genres: '',\r\n            imageUrl: '',\r\n            premiered: '',\r\n            \r\n        },\r\n        validationSchema: Yup.object({\r\n            name: Yup.string()\r\n              .min(2, 'Too Short!')\r\n              .max(50, 'Too Long!')\r\n              .required('Required'),\r\n              genres: Yup.string()\r\n              .min(3, 'Too Short!')\r\n              .max(50, 'Too Long!')\r\n              .required('Required'),\r\n            imageUrl: Yup.string()\r\n              .min(10, 'Too Short!')\r\n              .max(100, 'Too Long!')\r\n              .required('Required'),\r\n            premiered: Yup.date()\r\n              .min(new Date('01/01/1930'))\r\n              .max(new Date('01/01/2930'))                   \r\n              .required('Required'),\r\n        }),\r\n        onSubmit: async (values) => {\r\n            let genres = values.genres.split(',');\r\n            let updatedMovie = {\r\n                _id: props.match.params.id,\r\n                name : values.name,\r\n                genres : genres,\r\n                image : {\r\n                    medium : values.imageUrl,\r\n                    original : ''\r\n                },\r\n                premiered : values.premiered\r\n            }\r\n\r\n            let resp = await moviesUtil.updateMovie(updatedMovie);\r\n            console.log(resp.data)\r\n\r\n            if(resp.success){\r\n                dispatch({\r\n                    type: \"UpdateMovie\",\r\n                    payload: updatedMovie\r\n                })\r\n                \r\n                setMsg(resp.msg);\r\n\r\n                history.push('/movies');\r\n            }\r\n            else{\r\n                setMsg(resp.msg);\r\n                \r\n            }\r\n            \r\n            // setMsg(resp.msg);\r\n        },\r\n    });\r\n\r\n    useEffect(() => {\r\n        let movieId = props.match.params.id;\r\n        let movie = movies.filter(m => m._id === movieId)[0];\r\n        console.log(movie)\r\n\r\n        let fields = ['name', 'genres', 'imageUrl', 'premiered'];\r\n\r\n        fields.forEach(field => {\r\n                if(field === 'imageUrl'){\r\n                    formik.setFieldValue(field, movie.image.medium);\r\n                }\r\n                else if(field === 'premiered'){\r\n                    formik.setFieldValue(field, movie[field].slice(0, 10));\r\n                }\r\n                else{\r\n                    formik.setFieldValue(field, movie[field]);\r\n                }\r\n            }\r\n        );\r\n\r\n        //setMovie(movie);\r\n        \r\n    }, [])\r\n\r\n    return (\r\n        \r\n        <React.Fragment>\r\n            <MovieMenu/>\r\n            {msg}\r\n            \r\n            <form onSubmit={formik.handleSubmit}>\r\n                <label htmlFor=\"name\">Name</label>\r\n\r\n                <input\r\n                    id=\"name\"\r\n                    name=\"name\"\r\n                    type=\"text\"\r\n                    {...formik.getFieldProps('name')}\r\n                    value={formik.values.name}\r\n                />\r\n\r\n                {formik.touched.name && formik.errors.name ? (\r\n                    <div>{formik.errors.name}</div>\r\n                ) : null}\r\n\r\n                <br/>\r\n\r\n                <label htmlFor=\"genres\">Genres</label>\r\n                <input\r\n                    id=\"genres\"\r\n                    name=\"genres\"\r\n                    type=\"text\"\r\n                    {...formik.getFieldProps('genres')}\r\n                    value={formik.values.genres}\r\n                />\r\n                {formik.touched.genres && formik.errors.genres ? (\r\n                    <div>{formik.errors.genres}</div>\r\n                ) : null}\r\n\r\n                <br/>\r\n\r\n                <label htmlFor=\"imageUrl\">Image Url</label>\r\n                <input\r\n                    id=\"imageUrl\"\r\n                    type=\"text\"\r\n                    {...formik.getFieldProps('imageUrl')}\r\n                    value={formik.values.imageUrl}\r\n                />\r\n                {formik.touched.imageUrl && formik.errors.imageUrl ? (\r\n                    <div>{formik.errors.imageUrl}</div>\r\n                ) : null}\r\n                \r\n                <br/>\r\n                <label htmlFor=\"premiered\">Premiered</label>\r\n\r\n                <TextField \r\n                    id=\"premiered\"\r\n                    label=\"Premiered\"\r\n                    type=\"date\"\r\n                    format={'dd/mm/yyyy'}\r\n                    onChange={formik.handleChange}\r\n                    {...formik.getFieldProps('premiered')}\r\n                    value={formik.values.premiered}\r\n                    \r\n                    \r\n                    className={classes.input}\r\n                    \r\n                    InputLabelProps={{\r\n                    shrink: true,\r\n                    \r\n                    \r\n                    }}\r\n                    \r\n                    \r\n                />\r\n                {formik.touched.premiered && formik.errors.premiered ? (\r\n                    <div>{formik.errors.premiered}</div>\r\n                ) : null}\r\n<br/>\r\n                <button type='submit'>Submit</button>\r\n                <button><Link to=\"/movies\">Cancel</Link></button>\r\n            </form>\r\n            \r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default EditMovieComp\r\n","C:\\mern_course\\FSFinalProject1\\CinemaFE\\cinemaapp\\src\\Components\\movies\\menu\\MovieMenu.js",[],"C:\\mern_course\\FSFinalProject1\\CinemaFE\\cinemaapp\\src\\Components\\subscriptions\\menu\\MemberMenu.js",[],"C:\\mern_course\\FSFinalProject1\\CinemaFE\\cinemaapp\\src\\Components\\subscriptions\\MemberComp.js",[],"C:\\mern_course\\FSFinalProject1\\CinemaFE\\cinemaapp\\src\\Components\\subscriptions\\EditMemberComp.js",["206","207","208","209"],"import React, { useState, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport { useFormik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nimport MemberMenu from './menu/MemberMenu';\r\nimport membersUtil from '../../Utils/membersUtil';\r\n\r\nfunction EditMemberComp(props) {\r\n    const [msg, setMsg] = useState();\r\n    const membersSubscriptions = useSelector(state => state.membersSubscriptions);\r\n    const dispatch = useDispatch();\r\n    \r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            name: '',\r\n            email: '',\r\n            city: '',\r\n        },\r\n        validationSchema: Yup.object({\r\n            name: Yup.string()\r\n              .min(5, 'Too Short!')\r\n              .max(50, 'Too Long!')\r\n              .required('Required'),\r\n            email: Yup.string()\r\n                .required(\"Please enter valid email\")\r\n                .matches(/^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/, \"Email is not valid\"),\r\n            city: Yup.string()\r\n              .min(3, 'Too Short!')\r\n              .max(50, 'Too Long!')\r\n              .required('Required'),\r\n        }),\r\n        onSubmit: async (values) => {\r\n            let updateddMember = values;\r\n            updateddMember.id = props.match.params.id;\r\n            \r\n            let resp = await membersUtil.updateMember(updateddMember);\r\n\r\n            if(resp.success){\r\n                dispatch({\r\n                    type: \"UpdateMember\",\r\n                    payload: updateddMember\r\n                })\r\n                //formik.resetForm();\r\n                setMsg(resp.msg);\r\n            }\r\n            else{\r\n                setMsg(resp.msg);\r\n                \r\n            }\r\n        },\r\n    });\r\n\r\n    useEffect(() => {\r\n        let memberId = props.match.params.id;\r\n        let memberSubscriptions = membersSubscriptions.filter(ms => ms.id === memberId)[0];\r\n        \r\n        let fields = ['name', 'email', 'city'];\r\n\r\n        fields.forEach(field => {\r\n            formik.setFieldValue(field, memberSubscriptions[field]);\r\n        });\r\n    }, [])\r\n\r\n    return (\r\n        <div>\r\n            <React.Fragment>\r\n                <MemberMenu/>\r\n                {msg}\r\n                <form onSubmit={formik.handleSubmit}>\r\n\r\n                    <label htmlFor=\"name\">Name</label>\r\n                    <input\r\n                        id=\"name\"\r\n                        type=\"text\"\r\n                        {...formik.getFieldProps('name')}\r\n                    />\r\n                    \r\n                    {formik.touched.name && formik.errors.name ? (\r\n                        <div>{formik.errors.name}</div>\r\n                    ) : null}\r\n                    <br/>\r\n\r\n                    <label htmlFor=\"email\">Email</label>\r\n                    <input\r\n                        id=\"email\"\r\n                        type=\"email\"\r\n                        {...formik.getFieldProps('email')}\r\n                    />\r\n                    \r\n                    {formik.touched.email && formik.errors.email ? (\r\n                        <div>{formik.errors.email}</div>\r\n                    ) : null}\r\n                    <br/>\r\n\r\n                    <label htmlFor=\"city\">City</label>\r\n                    <input\r\n                        id=\"city\"\r\n                        type=\"text\"\r\n                        {...formik.getFieldProps('city')}\r\n                    />\r\n                    \r\n                    {formik.touched.city && formik.errors.city ? (\r\n                        <div>{formik.errors.city}</div>\r\n                    ) : null}\r\n                    <br/>\r\n\r\n                    <button type='submit'>Submit</button>\r\n                    <button><Link to=\"/subscriptions\">Cancel</Link></button>\r\n\r\n\r\n                </form>\r\n            </React.Fragment>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default EditMemberComp\r\n","C:\\mern_course\\FSFinalProject1\\CinemaFE\\cinemaapp\\src\\Components\\subscriptions\\AddMemberComp.js",["210","211"],"import React, {useState} from 'react';\r\nimport {Link } from 'react-router-dom';\r\nimport { useFormik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { useDispatch } from 'react-redux';\r\n\r\nimport MemberMenu from '../subscriptions/menu/MemberMenu';\r\n\r\nimport membersUtil from '../../Utils/membersUtil';\r\n\r\nfunction AddMemberComp() {\r\n    const [msg, setMsg] = useState('');\r\n    const dispatch = useDispatch();\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            name: '',\r\n            email: '',\r\n            city: '',\r\n        },\r\n        validationSchema: Yup.object({\r\n            name: Yup.string()\r\n              .min(5, 'Too Short!')\r\n              .max(50, 'Too Long!')\r\n              .required('Required'),\r\n            email: Yup.string()\r\n                .required(\"Please enter valid email\")\r\n                .matches(/^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/, \"Email is not valid\"),\r\n            city: Yup.string()\r\n              .min(3, 'Too Short!')\r\n              .max(50, 'Too Long!')\r\n              .required('Required'),\r\n        }),\r\n        onSubmit: async (values) => {\r\n            let addedMember = values;\r\n            let resp = await membersUtil.addMember(addedMember);\r\n            \r\n            \r\n          if(resp.success){\r\n                addedMember._id = resp.memberId;\r\n              \r\n                dispatch({\r\n                    type: \"AddMember\",\r\n                    payload: addedMember\r\n                })\r\n                formik.resetForm();\r\n                setMsg(resp.msg);\r\n            }\r\n            else{\r\n                setMsg(resp.msg);\r\n                \r\n            }\r\n        },\r\n    });\r\n    return (\r\n        <React.Fragment>\r\n            <MemberMenu/>\r\n            {msg}\r\n            <form onSubmit={formik.handleSubmit}>\r\n\r\n                <label htmlFor=\"name\">Name</label>\r\n                <input\r\n                    id=\"name\"\r\n                    type=\"text\"\r\n                    {...formik.getFieldProps('name')}\r\n                />\r\n                \r\n                {formik.touched.name && formik.errors.name ? (\r\n                    <div>{formik.errors.name}</div>\r\n                ) : null}\r\n                <br/>\r\n\r\n                <label htmlFor=\"email\">Email</label>\r\n                <input\r\n                    id=\"email\"\r\n                    type=\"email\"\r\n                    {...formik.getFieldProps('email')}\r\n                />\r\n                \r\n                {formik.touched.email && formik.errors.email ? (\r\n                    <div>{formik.errors.email}</div>\r\n                ) : null}\r\n                <br/>\r\n\r\n                 <label htmlFor=\"city\">City</label>\r\n                <input\r\n                    id=\"city\"\r\n                    type=\"text\"\r\n                    {...formik.getFieldProps('city')}\r\n                />\r\n                \r\n                {formik.touched.city && formik.errors.city ? (\r\n                    <div>{formik.errors.city}</div>\r\n                ) : null}\r\n                <br/>\r\n\r\n                <button type='submit'>Submit</button>\r\n                <button><Link to=\"/subscriptions\">Cancel</Link></button>\r\n\r\n\r\n            </form>\r\n        </React.Fragment>\r\n        \r\n    )\r\n}\r\n\r\nexport default AddMemberComp\r\n","C:\\mern_course\\FSFinalProject1\\CinemaFE\\cinemaapp\\src\\Utils\\membersUtil.js",["212"],"C:\\mern_course\\FSFinalProject1\\CinemaFE\\cinemaapp\\src\\Utils\\SubscriptionsUtil.js",["213","214","215"],"C:\\mern_course\\FSFinalProject1\\CinemaFE\\cinemaapp\\src\\Components\\subscriptions\\MembersSubscriptionsComp.js",["216","217","218"],"import React, {useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport MemberSubscriptions from './MemberSubscriptionsComp';\r\nimport MemberMenu from './menu/MemberMenu';\r\n\r\nimport './MembersSubscriptionsComp.css';\r\nimport subscriptionsUtil from '../../Utils/subscriptionsUtil';\r\n\r\nfunction SubscriptionsComp() {\r\n    const membersSubscriptions = useSelector(state => state.membersSubscriptions);\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n        <div className=''>\r\n            <MemberMenu/>\r\n            <div className='subscribers'>\r\n                All Members Subscriptions\r\n\r\n                {\r\n                    membersSubscriptions.map(ms =>{\r\n                        return <MemberSubscriptions key={ms.id} memberSubscriptions={ms} />\r\n\r\n                    })\r\n                }\r\n            </div>\r\n        </div>\r\n\r\n        \r\n    )\r\n}\r\n\r\nexport default SubscriptionsComp\r\n","C:\\mern_course\\FSFinalProject1\\CinemaFE\\cinemaapp\\src\\Components\\subscriptions\\MemberSubscriptionsComp.js",["219","220","221"],"import React, {useState } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport './MemberComp.css'\r\n\r\nimport moment from 'moment';\r\n \r\n\r\nfunction SubscriptionComp(props) {\r\n    const [watchedMovies, setWatchedMovies] = useState(props.memberSubscriptions.movies);\r\n    console.log('watchedMovies', {watchedMovies});\r\n    const deleteMember = (memberId) =>{\r\n\r\n\r\n    }\r\n\r\n    \r\n    const subscribeToMovie = () =>{\r\n\r\n    }\r\n\r\n    return (\r\n        <div className='moviesWatched'>\r\n\r\n<h4>{props.memberSubscriptions.name}</h4>\r\n           Email: {props.memberSubscriptions.email} <br/>\r\n           City: {props.memberSubscriptions.city} <br/>\r\n\r\n           <button><Link to={`/subscription/${props.memberSubscriptions.id}`}>Edit</Link></button>\r\n           <input type=\"button\" value=\"Delete\" onClick={() => deleteMember(props.member._id)}/>\r\n            <h5>Movies Watched</h5>\r\n            \r\n            {\r\n                \r\n                watchedMovies.length === 0 ? <div>this member didn't watch any movie yet</div> : \r\n                <ul>\r\n                    {\r\n                        watchedMovies.map(wm =>{\r\n                            return <li key={wm.movieId} className='stam'><Link to={`/movie/${wm.movieId}`}>{wm.movieName}</Link>, {moment(wm.watchDate).format('DD/MM/YYYY')}</li>\r\n\r\n                        })\r\n                    }\r\n                </ul>\r\n            }\r\n                                    \r\n            \r\n           \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SubscriptionComp\r\n","C:\\mern_course\\FSFinalProject1\\CinemaFE\\cinemaapp\\src\\Utils\\subscriptionsUtil.js",["222","223","224"],"import axios from 'axios';\r\nimport membersUtils from './membersUtil';\r\nimport moviesUtils from './movieUtil';\r\n\r\nconst subscriptionsUrl = \"http://localhost:5000/api/subscriptions/\";\r\n\r\n\r\n\r\nconst getSubscriptions = async () =>{\r\n    let resp = await axios.get(`${subscriptionsUrl}`);\r\n    return resp.data;\r\n\r\n}\r\n\r\nconst getFullMembersSubscriptions = async () => {\r\n    let subscriptionsMovies = null; //the members's subscriptions movies (each member and his subscribed & unsubscribed movies)\r\n    let membersResp = await membersUtils.loadMembers();\r\n    let moviesResp = await moviesUtils.loadMovies();\r\n    let subscriptionsResp = await getSubscriptions();\r\n    let members, movies, subscriptions;\r\n\r\n    if(membersResp){\r\n        members = membersResp.members;\r\n    }\r\n\r\n    if(moviesResp){\r\n        movies = moviesResp.movies;\r\n    }\r\n\r\n    if(subscriptionsResp){\r\n        subscriptions = subscriptionsResp.subscriptions;\r\n    }\r\n    \r\n\r\n    if(subscriptions && members && movies)\r\n    {\r\n        subscriptionsMovies = members.map(member =>{\r\n            let memberSubscribesMovies;  //all movies the member watched already (the movie's id and watched date)\r\n            let memberMovies;   //all movies the member watched already (include the movie's data)\r\n            let subscribeMoviesIds = [];    //all the subscribes's movies id (per member)\r\n            let unsubscribedMovies = [];    //unwatched movies for member\r\n            let subscription = subscriptions.filter(s => s.memberId === member._id);\r\n            if(subscription.length > 0){\r\n                memberSubscribesMovies = subscription[0].movies;\r\n                let movie;\r\n\r\n                if(memberSubscribesMovies != undefined){\r\n                    memberMovies = memberSubscribesMovies.map(mi =>{\r\n                        subscribeMoviesIds.push(mi.movieId)\r\n                        movie = movies.filter(m => mi.movieId === m._id);\r\n                        if(movie.length > 0){\r\n                            return {\r\n                                \"movieId\" : movie[0]._id,\r\n                                \"movieName\" : movie[0].name,\r\n                                'movieGenres': movie[0].genres,\r\n                                'movieImgUrl': movie[0].image.medium,\r\n                                'moviePremiered': movie[0].image.premiered,\r\n                                \"watchDate\" : mi.date\r\n                            }\r\n\r\n                        }\r\n                        \r\n                    })\r\n                    \r\n                    movies.forEach(m => {\r\n                        if(!subscribeMoviesIds.includes(m._id)){\r\n                            let unsubscribedMovie = {\r\n                                \"_id\" : m._id,\r\n                                \"name\" : m.name\r\n                            }\r\n                            \r\n                           unsubscribedMovies = [...unsubscribedMovies, unsubscribedMovie];\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n            else{\r\n                unsubscribedMovies = movies;\r\n            }\r\n\r\n            return {\r\n                \"id\" : member._id,\r\n                \"name\" : member.name,\r\n                \"email\" : member.email,\r\n                \"city\" : member.city,\r\n                \"movies\" : memberMovies !== undefined ? memberMovies : [],\r\n                \"unwatched\" : unsubscribedMovies\r\n            }\r\n        })\r\n    }\r\n\r\n    return subscriptionsMovies;\r\n\r\n}\r\n\r\n\r\n\r\nexport default {getSubscriptions, getFullMembersSubscriptions};",{"ruleId":"225","replacedBy":"226"},{"ruleId":"227","replacedBy":"228"},{"ruleId":"229","severity":1,"message":"230","line":1,"column":27,"nodeType":"231","messageId":"232","endLine":1,"endColumn":35},{"ruleId":"229","severity":1,"message":"233","line":13,"column":8,"nodeType":"231","messageId":"232","endLine":13,"endColumn":15},{"ruleId":"234","severity":1,"message":"235","line":100,"column":8,"nodeType":"236","endLine":100,"endColumn":10,"suggestions":"237"},{"ruleId":"229","severity":1,"message":"238","line":1,"column":27,"nodeType":"231","messageId":"232","endLine":1,"endColumn":36},{"ruleId":"229","severity":1,"message":"239","line":10,"column":16,"nodeType":"231","messageId":"232","endLine":10,"endColumn":27},{"ruleId":"229","severity":1,"message":"240","line":10,"column":29,"nodeType":"231","messageId":"232","endLine":10,"endColumn":43},{"ruleId":"229","severity":1,"message":"241","line":1,"column":10,"nodeType":"231","messageId":"232","endLine":1,"endColumn":13},{"ruleId":"229","severity":1,"message":"242","line":2,"column":8,"nodeType":"231","messageId":"232","endLine":2,"endColumn":17},{"ruleId":"243","severity":1,"message":"244","line":53,"column":1,"nodeType":"245","endLine":53,"endColumn":67},{"ruleId":"229","severity":1,"message":"246","line":4,"column":8,"nodeType":"231","messageId":"232","endLine":4,"endColumn":13},{"ruleId":"225","replacedBy":"247"},{"ruleId":"227","replacedBy":"248"},{"ruleId":"229","severity":1,"message":"249","line":6,"column":8,"nodeType":"231","messageId":"232","endLine":6,"endColumn":14},{"ruleId":"243","severity":1,"message":"244","line":46,"column":1,"nodeType":"245","endLine":46,"endColumn":88},{"ruleId":"229","severity":1,"message":"230","line":1,"column":17,"nodeType":"231","messageId":"232","endLine":1,"endColumn":25},{"ruleId":"229","severity":1,"message":"238","line":1,"column":27,"nodeType":"231","messageId":"232","endLine":1,"endColumn":36},{"ruleId":"229","severity":1,"message":"230","line":1,"column":16,"nodeType":"231","messageId":"232","endLine":1,"endColumn":24},{"ruleId":"229","severity":1,"message":"250","line":3,"column":10,"nodeType":"231","messageId":"232","endLine":3,"endColumn":29},{"ruleId":"229","severity":1,"message":"251","line":10,"column":12,"nodeType":"231","messageId":"232","endLine":10,"endColumn":15},{"ruleId":"229","severity":1,"message":"252","line":10,"column":17,"nodeType":"231","messageId":"232","endLine":10,"endColumn":23},{"ruleId":"234","severity":1,"message":"253","line":29,"column":8,"nodeType":"236","endLine":29,"endColumn":10,"suggestions":"254"},{"ruleId":"229","severity":1,"message":"255","line":6,"column":8,"nodeType":"231","messageId":"232","endLine":6,"endColumn":18},{"ruleId":"229","severity":1,"message":"256","line":10,"column":11,"nodeType":"231","messageId":"232","endLine":10,"endColumn":19},{"ruleId":"257","severity":1,"message":"258","line":33,"column":20,"nodeType":"259","endLine":33,"endColumn":77},{"ruleId":"229","severity":1,"message":"260","line":5,"column":10,"nodeType":"231","messageId":"232","endLine":5,"endColumn":21},{"ruleId":"229","severity":1,"message":"261","line":6,"column":8,"nodeType":"231","messageId":"232","endLine":6,"endColumn":14},{"ruleId":"229","severity":1,"message":"262","line":12,"column":10,"nodeType":"231","messageId":"232","endLine":12,"endColumn":13},{"ruleId":"229","severity":1,"message":"263","line":39,"column":11,"nodeType":"231","messageId":"232","endLine":39,"endColumn":18},{"ruleId":"229","severity":1,"message":"264","line":107,"column":11,"nodeType":"231","messageId":"232","endLine":107,"endColumn":23},{"ruleId":"229","severity":1,"message":"260","line":5,"column":10,"nodeType":"231","messageId":"232","endLine":5,"endColumn":21},{"ruleId":"229","severity":1,"message":"261","line":6,"column":8,"nodeType":"231","messageId":"232","endLine":6,"endColumn":14},{"ruleId":"229","severity":1,"message":"262","line":12,"column":10,"nodeType":"231","messageId":"232","endLine":12,"endColumn":13},{"ruleId":"229","severity":1,"message":"242","line":16,"column":8,"nodeType":"231","messageId":"232","endLine":16,"endColumn":17},{"ruleId":"229","severity":1,"message":"265","line":37,"column":12,"nodeType":"231","messageId":"232","endLine":37,"endColumn":17},{"ruleId":"229","severity":1,"message":"266","line":37,"column":19,"nodeType":"231","messageId":"232","endLine":37,"endColumn":27},{"ruleId":"234","severity":1,"message":"267","line":128,"column":8,"nodeType":"236","endLine":128,"endColumn":10,"suggestions":"268"},{"ruleId":"229","severity":1,"message":"269","line":7,"column":8,"nodeType":"231","messageId":"232","endLine":7,"endColumn":17},{"ruleId":"270","severity":1,"message":"271","line":31,"column":36,"nodeType":"272","messageId":"273","endLine":31,"endColumn":37,"suggestions":"274"},{"ruleId":"270","severity":1,"message":"271","line":31,"column":61,"nodeType":"272","messageId":"273","endLine":31,"endColumn":62,"suggestions":"275"},{"ruleId":"234","severity":1,"message":"276","line":67,"column":8,"nodeType":"236","endLine":67,"endColumn":10,"suggestions":"277"},{"ruleId":"270","severity":1,"message":"271","line":27,"column":36,"nodeType":"272","messageId":"273","endLine":27,"endColumn":37,"suggestions":"278"},{"ruleId":"270","severity":1,"message":"271","line":27,"column":61,"nodeType":"272","messageId":"273","endLine":27,"endColumn":62,"suggestions":"279"},{"ruleId":"243","severity":1,"message":"244","line":53,"column":1,"nodeType":"245","endLine":53,"endColumn":71},{"ruleId":"280","severity":1,"message":"281","line":47,"column":43,"nodeType":"282","messageId":"283","endLine":47,"endColumn":45},{"ruleId":"284","severity":1,"message":"285","line":48,"column":66,"nodeType":"286","messageId":"287","endLine":48,"endColumn":68},{"ruleId":"243","severity":1,"message":"244","line":96,"column":1,"nodeType":"245","endLine":96,"endColumn":64},{"ruleId":"229","severity":1,"message":"238","line":1,"column":16,"nodeType":"231","messageId":"232","endLine":1,"endColumn":25},{"ruleId":"229","severity":1,"message":"288","line":8,"column":8,"nodeType":"231","messageId":"232","endLine":8,"endColumn":25},{"ruleId":"229","severity":1,"message":"256","line":12,"column":11,"nodeType":"231","messageId":"232","endLine":12,"endColumn":19},{"ruleId":"229","severity":1,"message":"289","line":2,"column":10,"nodeType":"231","messageId":"232","endLine":2,"endColumn":21},{"ruleId":"229","severity":1,"message":"290","line":11,"column":27,"nodeType":"231","messageId":"232","endLine":11,"endColumn":43},{"ruleId":"229","severity":1,"message":"291","line":19,"column":11,"nodeType":"231","messageId":"232","endLine":19,"endColumn":27},{"ruleId":"280","severity":1,"message":"281","line":47,"column":43,"nodeType":"282","messageId":"283","endLine":47,"endColumn":45},{"ruleId":"284","severity":1,"message":"285","line":48,"column":66,"nodeType":"286","messageId":"287","endLine":48,"endColumn":68},{"ruleId":"243","severity":1,"message":"244","line":98,"column":1,"nodeType":"245","endLine":98,"endColumn":64},"no-native-reassign",["292"],"no-negated-in-lhs",["293"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'Members' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'dispatch', 'members.length', 'membersSubscriptions.length', 'movies.length', 'subscriptions.length', and 'users.length'. Either include them or remove the dependency array.","ArrayExpression",["294"],"'useEffect' is defined but never used.","'searchMovie' is assigned a value but never used.","'setSearchMovie' is assigned a value but never used.","'act' is defined but never used.","'movieUtil' is defined but never used.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","'CompB' is defined but never used.",["292"],["293"],"'Movies' is defined but never used.","'computeHeadingLevel' is defined but never used.","'msg' is assigned a value but never used.","'setMsg' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'formik', 'props.match.params.id', and 'users'. Either include them or remove the dependency array.",["295"],"'moviesUtil' is defined but never used.","'dispatch' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'userHistory' is defined but never used.","'moment' is defined but never used.","'red' is defined but never used.","'history' is assigned a value but never used.","'handleChange' is assigned a value but never used.","'movie' is assigned a value but never used.","'setMovie' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'formik', 'movies', and 'props.match.params.id'. Either include them or remove the dependency array.",["296"],"'TextField' is defined but never used.","no-useless-escape","Unnecessary escape character: \\[.","Literal","unnecessaryEscape",["297","298"],["299","300"],"React Hook useEffect has missing dependencies: 'formik', 'membersSubscriptions', and 'props.match.params.id'. Either include them or remove the dependency array.",["301"],["302","303"],["304","305"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'subscriptionsUtil' is defined but never used.","'useSelector' is defined but never used.","'setWatchedMovies' is assigned a value but never used.","'subscribeToMovie' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"306","fix":"307"},{"desc":"308","fix":"309"},{"desc":"310","fix":"311"},{"messageId":"312","fix":"313","desc":"314"},{"messageId":"315","fix":"316","desc":"317"},{"messageId":"312","fix":"318","desc":"314"},{"messageId":"315","fix":"319","desc":"317"},{"desc":"320","fix":"321"},{"messageId":"312","fix":"322","desc":"314"},{"messageId":"315","fix":"323","desc":"317"},{"messageId":"312","fix":"324","desc":"314"},{"messageId":"315","fix":"325","desc":"317"},"Update the dependencies array to be: [dispatch, members.length, membersSubscriptions.length, movies.length, subscriptions.length, users.length]",{"range":"326","text":"327"},"Update the dependencies array to be: [formik, props.match.params.id, users]",{"range":"328","text":"329"},"Update the dependencies array to be: [formik, movies, props.match.params.id]",{"range":"330","text":"331"},"removeEscape",{"range":"332","text":"333"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"334","text":"335"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"336","text":"333"},{"range":"337","text":"335"},"Update the dependencies array to be: [formik, membersSubscriptions, props.match.params.id]",{"range":"338","text":"339"},{"range":"340","text":"333"},{"range":"341","text":"335"},{"range":"342","text":"333"},{"range":"343","text":"335"},[3343,3345],"[dispatch, members.length, membersSubscriptions.length, movies.length, subscriptions.length, users.length]",[1026,1028],"[formik, props.match.params.id, users]",[3789,3791],"[formik, movies, props.match.params.id]",[1024,1025],"",[1024,1024],"\\",[1049,1050],[1049,1049],[2289,2291],"[formik, membersSubscriptions, props.match.params.id]",[862,863],[862,862],[887,888],[887,887]]