[{"C:\\mern_course\\FSFinalProject1\\CinemaFE\\cinemaapp\\src\\index.js":"1","C:\\mern_course\\FSFinalProject1\\CinemaFE\\cinemaapp\\src\\App.js":"2","C:\\mern_course\\FSFinalProject1\\CinemaFE\\cinemaapp\\src\\reportWebVitals.js":"3","C:\\mern_course\\FSFinalProject1\\CinemaFE\\cinemaapp\\src\\Components\\movies\\MoviesComp.js":"4","C:\\mern_course\\FSFinalProject1\\CinemaFE\\cinemaapp\\src\\Redux\\reducer.js":"5","C:\\mern_course\\FSFinalProject1\\CinemaFE\\cinemaapp\\src\\Utils\\movieUtil.js":"6","C:\\mern_course\\FSFinalProject1\\CinemaFE\\cinemaapp\\src\\Components\\CompA.js":"7","C:\\mern_course\\FSFinalProject1\\CinemaFE\\cinemaapp\\src\\Components\\CompB.js":"8","C:\\mern_course\\FSFinalProject1\\CinemaFE\\cinemaapp\\src\\Components\\CompC.js":"9","C:\\mern_course\\FSFinalProject1\\CinemaFE\\cinemaapp\\src\\Components\\WelcomeComp.js":"10","C:\\mern_course\\FSFinalProject1\\CinemaFE\\cinemaapp\\src\\Components\\LoginComp.js":"11","C:\\mern_course\\FSFinalProject1\\CinemaFE\\cinemaapp\\src\\Components\\MainComp.js":"12","C:\\mern_course\\FSFinalProject1\\CinemaFE\\cinemaapp\\src\\Utils\\usersUtil.js":"13","C:\\mern_course\\FSFinalProject1\\CinemaFE\\cinemaapp\\src\\Components\\HeaderComp.js":"14","C:\\mern_course\\FSFinalProject1\\CinemaFE\\cinemaapp\\src\\Components\\subscriptions\\MembersComp.js":"15","C:\\mern_course\\FSFinalProject1\\CinemaFE\\cinemaapp\\src\\Components\\users\\AddUserComp.js":"16","C:\\mern_course\\FSFinalProject1\\CinemaFE\\cinemaapp\\src\\Components\\users\\CreateAccountComp.js":"17","C:\\mern_course\\FSFinalProject1\\CinemaFE\\cinemaapp\\src\\Components\\customField\\PermossionComp.js":"18","C:\\mern_course\\FSFinalProject1\\CinemaFE\\cinemaapp\\src\\Components\\customField\\PermossionComp1.js":"19","C:\\mern_course\\FSFinalProject1\\CinemaFE\\cinemaapp\\src\\Components\\users\\UsersComp.js":"20","C:\\mern_course\\FSFinalProject1\\CinemaFE\\cinemaapp\\src\\Components\\users\\UserComp.js":"21","C:\\mern_course\\FSFinalProject1\\CinemaFE\\cinemaapp\\src\\Components\\users\\EditUserComp.js":"22","C:\\mern_course\\FSFinalProject1\\CinemaFE\\cinemaapp\\src\\Components\\movies\\MovieComp.js":"23","C:\\mern_course\\FSFinalProject1\\CinemaFE\\cinemaapp\\src\\Components\\users\\menu\\UserMenu.js":"24","C:\\mern_course\\FSFinalProject1\\CinemaFE\\cinemaapp\\src\\Components\\movies\\AddMovieComp.js":"25","C:\\mern_course\\FSFinalProject1\\CinemaFE\\cinemaapp\\src\\Components\\movies\\EditMovieComp.js":"26","C:\\mern_course\\FSFinalProject1\\CinemaFE\\cinemaapp\\src\\Components\\movies\\menu\\MovieMenu.js":"27","C:\\mern_course\\FSFinalProject1\\CinemaFE\\cinemaapp\\src\\Utils\\memberUtil.js":"28"},{"size":1245,"mtime":1615886104163,"results":"29","hashOfConfig":"30"},{"size":3250,"mtime":1617867364298,"results":"31","hashOfConfig":"30"},{"size":375,"mtime":1615301173254,"results":"32","hashOfConfig":"30"},{"size":1031,"mtime":1617861227463,"results":"33","hashOfConfig":"30"},{"size":3412,"mtime":1617867431947,"results":"34","hashOfConfig":"30"},{"size":1274,"mtime":1617862504719,"results":"35","hashOfConfig":"30"},{"size":630,"mtime":1612455879221,"results":"36","hashOfConfig":"30"},{"size":341,"mtime":1612423971804,"results":"37","hashOfConfig":"30"},{"size":346,"mtime":1612455798597,"results":"38","hashOfConfig":"30"},{"size":397,"mtime":1615301173246,"results":"39","hashOfConfig":"30"},{"size":2381,"mtime":1615301173245,"results":"40","hashOfConfig":"30"},{"size":768,"mtime":1615998903141,"results":"41","hashOfConfig":"30"},{"size":1209,"mtime":1615726984107,"results":"42","hashOfConfig":"30"},{"size":666,"mtime":1615301173245,"results":"43","hashOfConfig":"30"},{"size":171,"mtime":1615301173249,"results":"44","hashOfConfig":"30"},{"size":11398,"mtime":1615888521687,"results":"45","hashOfConfig":"30"},{"size":1452,"mtime":1615301173250,"results":"46","hashOfConfig":"30"},{"size":1413,"mtime":1615301173247,"results":"47","hashOfConfig":"30"},{"size":1265,"mtime":1615301173247,"results":"48","hashOfConfig":"30"},{"size":677,"mtime":1615888521687,"results":"49","hashOfConfig":"30"},{"size":1697,"mtime":1615888342762,"results":"50","hashOfConfig":"30"},{"size":12047,"mtime":1617778713759,"results":"51","hashOfConfig":"30"},{"size":1242,"mtime":1617863194308,"results":"52","hashOfConfig":"30"},{"size":543,"mtime":1615888521687,"results":"53","hashOfConfig":"30"},{"size":5603,"mtime":1617862052131,"results":"54","hashOfConfig":"30"},{"size":6514,"mtime":1617862074960,"results":"55","hashOfConfig":"30"},{"size":553,"mtime":1615888593443,"results":"56","hashOfConfig":"30"},{"size":1296,"mtime":1617867148429,"results":"57","hashOfConfig":"30"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},"1221art",{"filePath":"61","messages":"62","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"60"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"70","messages":"71","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"75"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"60"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"60"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"60"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"60"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"60"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"60"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"60"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"60"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"60"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"60"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\mern_course\\FSFinalProject1\\CinemaFE\\cinemaapp\\src\\index.js",[],["128","129"],"C:\\mern_course\\FSFinalProject1\\CinemaFE\\cinemaapp\\src\\App.js",["130","131"],"C:\\mern_course\\FSFinalProject1\\CinemaFE\\cinemaapp\\src\\reportWebVitals.js",[],"C:\\mern_course\\FSFinalProject1\\CinemaFE\\cinemaapp\\src\\Components\\movies\\MoviesComp.js",["132","133","134"],"import React, { useState, useEffect } from 'react';\r\nimport { useSelector } from 'react-redux';\r\n\r\nimport MovieComp from './MovieComp';\r\nimport MovieMenu from './menu/MovieMenu';\r\n\r\nfunction MoviesComp() {\r\n    const movies = useSelector( state => state.movies);\r\n\r\n        const [searchMovie, setSearchMovie] = useState('');\r\n    const [movieResult, setMoviesResult] = useState(movies)\r\n    \r\n    const search = (e) =>{\r\n        let search = e.target.value;\r\n\r\n        let result = movies.filter(m => m.name.toLowerCase().indexOf(search.toLowerCase()) > -1);\r\n        setMoviesResult(result);\r\n    }    \r\n\r\n    return (\r\n        \r\n      <div className=\"App\">\r\n        <MovieMenu/>\r\n        <input type=\"text\"  onChange={e => search(e)}></input>\r\n\r\n        All Movies:\r\n\r\n        <div>\r\n            {\r\n                movieResult.map((movie, index) =>{\r\n                    return <MovieComp key={index} movie={movie}/>\r\n                })\r\n            }\r\n\r\n        </div>\r\n    </div>\r\n    );\r\n  }\r\n  \r\n  export default MoviesComp;","C:\\mern_course\\FSFinalProject1\\CinemaFE\\cinemaapp\\src\\Redux\\reducer.js",["135","136"],"C:\\mern_course\\FSFinalProject1\\CinemaFE\\cinemaapp\\src\\Utils\\movieUtil.js",["137"],"C:\\mern_course\\FSFinalProject1\\CinemaFE\\cinemaapp\\src\\Components\\CompA.js",["138"],"import React  from 'react';\r\nimport {useDispatch} from 'react-redux';\r\n\r\nimport CompB from '../Components/CompB'\r\nimport CompC from '../Components/CompC'\r\n\r\nfunction CompA(props) {\r\n    const dispatch = useDispatch();\r\n    \r\n      \r\n     \r\n    return (\r\n        \r\n      <div className=\"App\">\r\n    \r\nComp A\r\n        <div>\r\n     \r\n        <button onClick={ () =>{\r\n            console.log(\"in counter\")\r\n            dispatch({\r\n                type : \"LoadData\"\r\n            })\r\n        } }>+</button>\r\n\r\n        <br/>\r\n\r\n        <CompC/>\r\n\r\n        </div>\r\n    \r\n\r\n\r\n        \r\n      </div>\r\n    );\r\n  }\r\n  \r\n  export default CompA;",["139","140"],"C:\\mern_course\\FSFinalProject1\\CinemaFE\\cinemaapp\\src\\Components\\CompB.js",[],"C:\\mern_course\\FSFinalProject1\\CinemaFE\\cinemaapp\\src\\Components\\CompC.js",[],"C:\\mern_course\\FSFinalProject1\\CinemaFE\\cinemaapp\\src\\Components\\WelcomeComp.js",[],"C:\\mern_course\\FSFinalProject1\\CinemaFE\\cinemaapp\\src\\Components\\LoginComp.js",[],"C:\\mern_course\\FSFinalProject1\\CinemaFE\\cinemaapp\\src\\Components\\MainComp.js",["141"],"import React from 'react';\r\n\r\nimport usersUtil from '../Utils/usersUtil';\r\n\r\nimport Header from '../Components/HeaderComp';\r\nimport Movies from '../Components/movies/MoviesComp';\r\n\r\nfunction MainComp() {\r\n\r\n async function test(){\r\n    let token = sessionStorage.getItem(\"user\");\r\n    /*let test ={\r\n      foo: \"foo\"\r\n  }*/\r\n\r\n  let resp = await usersUtil.test(token);\r\n  \r\n  if(resp.success){\r\n      console({resp})\r\n  }\r\n  else{\r\n    console.log(\"ERRor\")\r\n  }\r\n\r\n  }\r\n\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      {sessionStorage.getItem(\"userName\") ? <Header userName={sessionStorage.getItem(\"userName\")}/> : ''}\r\n      <h1>Main page</h1>\r\n\r\n\r\n\r\n\r\n<button type=\"button\" onClick={test} >test</button>\r\n\r\n      \r\n    </div>\r\n  );\r\n}\r\n  \r\n  export default MainComp;","C:\\mern_course\\FSFinalProject1\\CinemaFE\\cinemaapp\\src\\Utils\\usersUtil.js",["142"],"import axios from 'axios';\r\nconst usersUrl = \"http://localhost:5000/api/users/\";\r\n\r\nconst login = async (userLogin) =>{\r\n    console.log(userLogin)    \r\n    let resp = await axios.post(`${usersUrl}login`, userLogin);\r\n//console.log(resp)\r\n    return resp.data;\r\n}\r\n\r\nconst createAccount = async (createdUser) =>{\r\n    let resp = await axios.post(`${usersUrl}createAccount`, createdUser);\r\n    return resp.data;\r\n}\r\n\r\nconst addUser = async (newUser) =>{\r\n    let resp = await axios.post(`${usersUrl}add`, newUser);\r\n    return resp.data;\r\n}\r\n\r\nconst deleteUser = async (id) =>{\r\n    let resp = await axios.delete(`${usersUrl}${id}`);\r\n    return resp.data;\r\n}\r\n\r\nconst updateUser = async(updatedUser) =>{\r\n    let resp = await axios.put(usersUrl, updatedUser);\r\n    return resp.data;\r\n}\r\n\r\nconst getUsers = async () =>{\r\n    let resp = await axios.get(`${usersUrl}`);\r\n    return resp.data;\r\n}\r\n\r\n\r\n\r\nconst test = async (token) =>{\r\n\r\n   // console.log(test)    \r\n    let resp = await axios.post(`${usersUrl}test`, token, {headers: {\"Authorization\" : `Bearer ${token}`}});\r\n//console.log(resp)\r\n    return resp.data;\r\n}\r\n\r\nexport default {login, createAccount, addUser, test, getUsers, deleteUser, updateUser};","C:\\mern_course\\FSFinalProject1\\CinemaFE\\cinemaapp\\src\\Components\\HeaderComp.js",["143","144"],"import React, { useState, useEffect } from 'react'\r\nimport './HeaderComp.css';\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\n\r\n\r\nfunction HeaderComp(props){\r\n    \r\n    return(\r\n        <div>\r\n            <ul>\r\n                <li>logo</li>&nbsp;&nbsp;\r\n                <li><Link to='movies'>Movies</Link></li>&nbsp;&nbsp;\r\n                <li><Link to='subscriptions'>Subscriptions</Link></li>&nbsp;&nbsp;\r\n                <li><Link to='users'>User's Management</Link></li>&nbsp;&nbsp;\r\n                <li>{props.userFullName !== '' ? `Hello ${props.userFullName}` : ''}</li>&nbsp;&nbsp;\r\n            </ul>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default HeaderComp;","C:\\mern_course\\FSFinalProject1\\CinemaFE\\cinemaapp\\src\\Components\\subscriptions\\MembersComp.js",[],"C:\\mern_course\\FSFinalProject1\\CinemaFE\\cinemaapp\\src\\Components\\users\\AddUserComp.js",["145"],"import React, {useState} from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useHistory, Link } from 'react-router-dom';\r\nimport FormGroup from '@material-ui/core/FormGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\n\r\nimport { useFormik } from 'formik';\r\nimport * as Yup from 'yup';\r\n\r\nimport UserMenu from './menu/UserMenu';\r\nimport usersUtil from '../../Utils/usersUtil';\r\n\r\nfunction AddUserComp() {\r\n    //const [msg, setMsg] = useState('');\r\n    const msg = useSelector(state => state.msg);\r\n\r\n    const history = useHistory();\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const formik = useFormik({\r\n        /*enableReinitialize : true,*/\r\n        \r\n        initialValues: {\r\n            firstName: '',\r\n            lastName: '',\r\n            username: '',\r\n            sessionTimeOut: 0,\r\n            permissions: [],\r\n        },\r\n        validationSchema: Yup.object({\r\n            firstName: Yup.string()\r\n              .min(2, 'Too Short!')\r\n              .max(50, 'Too Long!')\r\n              .required('Required'),\r\n            lastName: Yup.string()\r\n              .min(2, 'Too Short!')\r\n              .max(50, 'Too Long!')\r\n              .required('Required'),\r\n            username: Yup.string()\r\n              .min(3, 'Too Short!')\r\n              .max(10, 'Too Long!')\r\n              .required('Required'),\r\n            sessionTimeOut: Yup.number()\r\n              .min(1, 'Must be more than 0 sec')\r\n              .max(60, 'Must be less than 60 sec')\r\n              .integer()\r\n              .positive()\r\n              .required('Required'),\r\n            permissions: Yup.array().min(1, 'Choose at list one permission')\r\n            \r\n            \r\n            }),\r\n        onSubmit: async (values) => {\r\n            let resp = await usersUtil.addUser(values);\r\n\r\n            if(resp.success){\r\n                values.id = resp.id;\r\n                \r\n                dispatch({\r\n                    type: \"AddUser\",\r\n                    payload: values\r\n                })\r\n\r\n                dispatch({\r\n                    type: \"UpdateMsg\",\r\n                    payload: resp.msg\r\n                })\r\n\r\n                history.push('/users');\r\n            }\r\n            else{\r\n                dispatch({\r\n                    type: \"UpdateMsg\",\r\n                    payload: resp.msg\r\n                })\r\n            }\r\n            \r\n            // setMsg(resp.msg);\r\n        },\r\n    });\r\n\r\n    const handleChange = (e) =>{\r\n        formik.handleChange(e);\r\n        const {name, checked, value} = e.target;\r\n        let userPermissions = formik.values.permissions;\r\n\r\n       // console.log('name, checked' , name, checked, value);\r\n      //  console.log('values' , formik.values);\r\n\r\n        if(name === 'createSubscriptions' || name === 'deleteSubscriptions' || name === 'updateSubscriptions'){\r\n            if(checked){\r\n                userPermissions = [...userPermissions, value];\r\n\r\n                if(!userPermissions.includes('View Subscriptions')){\r\n                    userPermissions = [...userPermissions, 'View Subscriptions'];\r\n                }\r\n            }\r\n            else{\r\n                userPermissions = userPermissions.filter(p => p !== value);\r\n                if(!userPermissions.includes('Create Subscriptions') && !userPermissions.includes('Delete Subscriptions') && !userPermissions.includes('Update Subscriptions')){\r\n                    userPermissions = userPermissions.filter(p => p !== 'View Subscriptions');\r\n                }\r\n            }\r\n        }\r\n        else if(name === 'createMovies' || name === 'deleteMovies' || name === 'updateMovies'){\r\n            if(checked){\r\n                userPermissions = [...userPermissions, value];\r\n\r\n                if(!userPermissions.includes('View Movies')){\r\n                    userPermissions = [...userPermissions, 'View Movies'];\r\n                }\r\n            }\r\n            else{\r\n                userPermissions = userPermissions.filter(p => p !== value);\r\n                if(!userPermissions.includes('Create Movies') && !userPermissions.includes('Delete Movies') && !userPermissions.includes('Update Movies')){\r\n                    userPermissions = userPermissions.filter(p => p !== 'View Movies');\r\n                }\r\n            }\r\n        }\r\n        else if(name === 'viewSubscriptions'){\r\n            if(checked){\r\n                userPermissions = [...userPermissions, value];\r\n            }\r\n            else{\r\n                userPermissions = userPermissions.filter(p => p.indexOf('S') === -1);\r\n            }\r\n        }\r\n        else if(name === 'viewMovies'){\r\n            if(checked){\r\n                userPermissions = [...userPermissions, value];\r\n\r\n            }\r\n            else{\r\n                userPermissions = userPermissions.filter(p => p.indexOf('M') === -1);\r\n            }\r\n        }\r\n\r\n        formik.setFieldValue('permissions', userPermissions);\r\n       // console.log('values' , formik.values);\r\n    }\r\n\r\n    return(\r\n        <React.Fragment>\r\n             <UserMenu/>\r\n            {msg}\r\n            <form onSubmit={formik.handleSubmit}>\r\n                \r\n                <label htmlFor='firstName'>First Name</label>\r\n                <input\r\n                    id='firstName'\r\n                    name='firstName'\r\n                    type='text'\r\n                    onChange={formik.handleChange}\r\n                    value={formik.values.firstName}\r\n                />\r\n                {formik.touched.firstName && formik.errors.firstName ? (\r\n                    <div>{formik.errors.firstName}</div>\r\n                ) : null}\r\n                <br/>\r\n\r\n                <label htmlFor='lastName'>Last Name</label>\r\n                <input\r\n                    id='lastName'\r\n                    name='lastName'\r\n                    type='text'\r\n                    onChange={formik.handleChange}\r\n                    value={formik.values.lastName}\r\n                />\r\n                {formik.touched.lastName && formik.errors.lastName ? (\r\n                    <div>{formik.errors.lastName}</div>\r\n                ) : null}\r\n                <br/>\r\n\r\n                <label htmlFor='userName'>UserName</label>\r\n                <input\r\n                    id='username'\r\n                    name='username'\r\n                    type='text'\r\n                    onChange={formik.handleChange}\r\n                    value={formik.values.username}\r\n                />\r\n                {formik.touched.username && formik.errors.username ? (\r\n                    <div>{formik.errors.username}</div>\r\n                ) : null}\r\n                <br/>\r\n\r\n                <label htmlFor='sessionTimeOut'>Session Time Out</label>\r\n                <input\r\n                    id='sessionTimeOut'\r\n                    name='sessionTimeOut'\r\n                    type='text'\r\n                    onChange={formik.handleChange}\r\n                    value={formik.values.sessionTimeOut}\r\n                />\r\n                {formik.touched.sessionTimeOut && formik.errors.sessionTimeOut ? (\r\n                    <div>{formik.errors.sessionTimeOut}</div>\r\n                ) : null}\r\n                <br/>\r\n\r\n\r\n                Permission: <br/>\r\n                    \r\n                <FormGroup row>\r\n                    <FormControlLabel\r\n                        control={<Checkbox checked={formik.values.permissions.includes('View Subscriptions')}  onChange={handleChange} id='viewSubscriptions' name='viewSubscriptions' value='View Subscriptions' size='small' style ={{\r\n                            color: 'white', \r\n                            }}\r\n                                />}\r\n                        label='View Subscriptions'\r\n                    />\r\n\r\n                    <FormControlLabel\r\n                        control={<Checkbox checked={formik.values.permissions.includes('Create Subscriptions')} onChange={handleChange} id='createSubscriptions' name='createSubscriptions' value='Create Subscriptions' size='small' style ={{\r\n                            color: 'white', \r\n                            }}\r\n                                />}\r\n                        label='Create Subscriptions'\r\n                    />\r\n\r\n                    <FormControlLabel\r\n                        control={<Checkbox checked={formik.values.permissions.includes('Delete Subscriptions')} onChange={handleChange} id='deleteSubscriptions' name='deleteSubscriptions' value='Delete Subscriptions' size='small' style ={{\r\n                            color: 'white', \r\n                            }}\r\n                                />}\r\n                        label='Delete Subscriptions'\r\n                    />\r\n\r\n                    <FormControlLabel\r\n                        control={<Checkbox checked={formik.values.permissions.includes('Update Subscriptions')} onChange={handleChange} id='updateSubscriptions' name='updateSubscriptions' value='Update Subscriptions' size='small' style ={{\r\n                            color: 'white', \r\n                            }}\r\n                                />}\r\n                        label='Update Subscriptions'\r\n                    />\r\n\r\n                    <FormControlLabel\r\n                        control={<Checkbox checked={formik.values.permissions.includes('View Movies')} onChange={handleChange} id='viewMovies' name='viewMovies' value='View Movies' size='small' style ={{\r\n                            color: 'white', \r\n                            }}\r\n                                />}\r\n                        label='View Movies'\r\n                    />\r\n\r\n                    <FormControlLabel\r\n                        control={<Checkbox checked={formik.values.permissions.includes('Create Movies')} onChange={handleChange} id='createMovies' name='createMovies' value='Create Movies' size='small' style ={{\r\n                            color: 'white', \r\n                            }}\r\n                                />}\r\n                        label='Create Movies'\r\n                    />\r\n\r\n                    <FormControlLabel\r\n                        control={<Checkbox checked={formik.values.permissions.includes('Delete Movies')} onChange={handleChange} id='deleteMovies' name='deleteMovies' value='Delete Movies' size='small' style ={{\r\n                            color: 'white', \r\n                            }}\r\n                                />}\r\n                        label='Delete Movies'\r\n                    />\r\n\r\n                    <FormControlLabel\r\n                        control={<Checkbox checked={formik.values.permissions.includes('Update Movies')} onChange={handleChange} id='updateMovies' name='updateMovies' value='Update Movies' size='small' style ={{\r\n                            color: 'white', \r\n                            }}\r\n                                />}\r\n                        label='Update Movies'\r\n                    />\r\n                </FormGroup>\r\n                \r\n                {formik.touched.permissions && formik.errors.permissions ? (\r\n                    <div>{formik.errors.permissions}</div>\r\n                ) : null}\r\n\r\n                <button type='submit'>Submit</button>\r\n                <button><Link to=\"/users\">Cancel</Link></button>\r\n            </form>\r\n        </React.Fragment>\r\n    )\r\n}\r\nexport default AddUserComp;\r\n","C:\\mern_course\\FSFinalProject1\\CinemaFE\\cinemaapp\\src\\Components\\users\\CreateAccountComp.js",[],"C:\\mern_course\\FSFinalProject1\\CinemaFE\\cinemaapp\\src\\Components\\customField\\PermossionComp.js",["146"],"import React from 'react';\r\nimport { Formik, Field, Form } from 'formik';\r\nimport { computeHeadingLevel } from '@testing-library/react';\r\n\r\n\r\nfunction PermossionComp(props) {\r\n\r\n    const handleChange = (checked) =>{\r\n        console.log(checked)\r\n    }\r\n   \r\n    return (\r\n        <Formik\r\n            initialValues={{\r\n                checked: [],\r\n            }}\r\n            onSubmit={(values) => {\r\n                alert(values.checked);\r\n            }}\r\n            \r\n        >\r\n            \r\n        {({ values, onChange }) => (\r\n            \r\n            <Form>\r\n               \r\n                <div id=\"checkbox-group\">Checked</div>\r\n                <div role=\"group\" aria-labelledby=\"checkbox-group\"  >\r\n                    <label>\r\n                    <Field type=\"checkbox\" name=\"checked\" value=\"One\" handleChange={handleChange} />\r\n                    One\r\n                    </label>\r\n                    <label>\r\n                    <Field type=\"checkbox\" name=\"checked\" value=\"Two\" />\r\n                    Two\r\n                    </label>\r\n                    <label>\r\n                    <Field type=\"checkbox\" name=\"checked\" value=\"Three\" />\r\n                    Three\r\n                    </label>\r\n                </div>\r\n\r\n                <button type=\"submit\">Submit</button>\r\n\r\n            </Form>\r\n        )}\r\n            \r\n        </Formik>\r\n    )\r\n}\r\n\r\nexport default PermossionComp\r\n","C:\\mern_course\\FSFinalProject1\\CinemaFE\\cinemaapp\\src\\Components\\customField\\PermossionComp1.js",[],"C:\\mern_course\\FSFinalProject1\\CinemaFE\\cinemaapp\\src\\Components\\users\\UsersComp.js",[],"C:\\mern_course\\FSFinalProject1\\CinemaFE\\cinemaapp\\src\\Components\\users\\UserComp.js",["147","148"],"import React, {useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport usersUtil from '../../Utils/usersUtil';\r\n\r\nimport './UserComp.css';\r\n\r\nfunction UserComp(props) {\r\n    const [msg, setMsg] = useState('');\r\n    const dispatch = useDispatch();\r\n\r\n    const deleteUser = async (id) =>{\r\n        let response = await usersUtil.deleteUser(id);\r\n        if(response.success){\r\n            dispatch({\r\n                type: \"DeleteUser\",\r\n                payload: id\r\n            })\r\n        }\r\n        else{\r\n            dispatch({\r\n                type: \"UpdateMsg\",\r\n                payload: response.msg\r\n            })\r\n        }\r\n    }\r\n    return (\r\n        \r\n        <div className='user'>\r\n            name: {props.user.firstName} {props.user.lastName}<br/>\r\n            usernme: {props.user.username}<br/>\r\n            SessionTimeout: {props.user.sessionTimeOut}<br/>\r\n            Created Date : {props.user.createdDate}<br/>\r\n            permissions : \r\n            {\r\n                props.user.permissions.map((p, i) =>{\r\n                    let permissionLen = props.user.permissions.length;\r\n                    if(i !== permissionLen-1){\r\n                        return (' ' + p + ',');\r\n                    }\r\n                    else{\r\n                        return (' ' + p);\r\n                    }\r\n                    \r\n                })\r\n            }\r\n            <br/>\r\n            \r\n            <button><Link to={`/user/${props.user.id}`}>Edit</Link></button>\r\n            <input type=\"button\" value=\"Delete\" onClick={() => deleteUser(props.user.id)}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default UserComp\r\n","C:\\mern_course\\FSFinalProject1\\CinemaFE\\cinemaapp\\src\\Components\\users\\EditUserComp.js",["149"],"import React, { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useHistory, Link } from 'react-router-dom';\r\nimport FormGroup from '@material-ui/core/FormGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\n\r\nimport { useFormik } from 'formik';\r\nimport * as Yup from 'yup';\r\n\r\nimport UserMenu from './menu/UserMenu';\r\nimport usersUtil from '../../Utils/usersUtil';\r\n\r\nfunction EditUserComp(props) {\r\n    const [user, setUser] = useState(null);\r\n    const users = useSelector(state => state.users);\r\n    const msg = useSelector(state => state.msg);\r\n\r\n    useEffect(() => {\r\n        let userId = props.match.params.id;\r\n        let user = users.filter(u => u.id === userId)[0];\r\n\r\n        let fields = ['firstName', 'lastName', 'username', 'sessionTimeOut', 'permissions'];\r\n\r\n        fields.forEach(field => formik.setFieldValue(field, user[field]));\r\n\r\n        setUser(user);\r\n        \r\n    }, [])\r\n\r\n    const history = useHistory();\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const formik = useFormik({\r\n        \r\n        initialValues: {\r\n            firstName: user ? user.firstName : '',\r\n            lastName: user ? user.lastName : '',\r\n            username: user ? user.username : '',\r\n            sessionTimeOut: user ? user.sessionTimeOut : 0,\r\n            permissions: user ? user.permissions: [],\r\n        },\r\n        validationSchema: Yup.object({\r\n            firstName: Yup.string()\r\n              .min(2, 'Too Short!')\r\n              .max(50, 'Too Long!')\r\n              .required('Required'),\r\n            lastName: Yup.string()\r\n              .min(2, 'Too Short!')\r\n              .max(50, 'Too Long!')\r\n              .required('Required'),\r\n            username: Yup.string()\r\n              .min(3, 'Too Short!')\r\n              .max(10, 'Too Long!')\r\n              .required('Required'),\r\n            sessionTimeOut: Yup.number()\r\n              .min(1, 'Must be more than 0 sec')\r\n              .max(60, 'Must be less than 60 sec')\r\n              .integer()\r\n              .positive()\r\n              .required('Required'),\r\n            permissions: Yup.array().min(1, 'Choose at list one permission')\r\n            }),\r\n        onSubmit: async (values) => {\r\n            let updatedUser = {\r\n                'id': user.id,\r\n                'firstName' : values.firstName,\r\n                'lastName' : values.lastName,\r\n                'username' : values.username,\r\n                'sessionTimeOut' : values.sessionTimeOut,\r\n                'permissions' : values.permissions\r\n            }\r\n\r\n            let resp = await usersUtil.updateUser(updatedUser);\r\n\r\n            if(resp.success){\r\n                dispatch({\r\n                    type: \"UpdateUser\",\r\n                    payload: updatedUser\r\n                })\r\n\r\n                dispatch({\r\n                    type: \"UpdateMsg\",\r\n                    payload: resp.msg\r\n                })\r\n\r\n                history.push('/users');\r\n            }\r\n            else{\r\n                dispatch({\r\n                    type: \"UpdateMsg\",\r\n                    payload: resp.msg\r\n                })\r\n            }\r\n            \r\n        },\r\n    });\r\n\r\n    const handleChange = (e) =>{\r\n        formik.handleChange(e);\r\n        const {name, checked, value} = e.target;\r\n        let userPermissions = formik.values.permissions;\r\n\r\n        if(name === 'createSubscriptions' || name === 'deleteSubscriptions' || name === 'updateSubscriptions'){\r\n            if(checked){\r\n                userPermissions = [...userPermissions, value];\r\n\r\n                if(!userPermissions.includes('View Subscriptions')){\r\n                    userPermissions = [...userPermissions, 'View Subscriptions'];\r\n                }\r\n            }\r\n            else{\r\n                userPermissions = userPermissions.filter(p => p !== value);\r\n                if(!userPermissions.includes('Create Subscriptions') && !userPermissions.includes('Delete Subscriptions') && !userPermissions.includes('Update Subscriptions')){\r\n                    userPermissions = userPermissions.filter(p => p !== 'View Subscriptions');\r\n                }\r\n            }\r\n        }\r\n        else if(name === 'createMovies' || name === 'deleteMovies' || name === 'updateMovies'){\r\n            if(checked){\r\n                userPermissions = [...userPermissions, value];\r\n\r\n                if(!userPermissions.includes('View Movies')){\r\n                    userPermissions = [...userPermissions, 'View Movies'];\r\n                }\r\n            }\r\n            else{\r\n                userPermissions = userPermissions.filter(p => p !== value);\r\n                if(!userPermissions.includes('Create Movies') && !userPermissions.includes('Delete Movies') && !userPermissions.includes('Update Movies')){\r\n                    userPermissions = userPermissions.filter(p => p !== 'View Movies');\r\n                }\r\n            }\r\n        }\r\n        else if(name === 'viewSubscriptions'){\r\n            if(checked){\r\n                userPermissions = [...userPermissions, value];\r\n            }\r\n            else{\r\n                userPermissions = userPermissions.filter(p => p.indexOf('S') === -1);\r\n            }\r\n        }\r\n        else if(name === 'viewMovies'){\r\n            if(checked){\r\n                userPermissions = [...userPermissions, value];\r\n\r\n            }\r\n            else{\r\n                userPermissions = userPermissions.filter(p => p.indexOf('M') === -1);\r\n            }\r\n        }\r\n\r\n        formik.setFieldValue('permissions', userPermissions);\r\n    }\r\n\r\n    return(\r\n        <React.Fragment>\r\n             <UserMenu/>\r\n             {msg}\r\n            <form onSubmit={formik.handleSubmit}>\r\n\r\n            <label htmlFor='firstName'>First Name</label>\r\n                <input\r\n                    id='firstName'\r\n                    name='firstName'\r\n                    type='text'\r\n                    onChange={formik.handleChange}\r\n                    value={formik.values.firstName}\r\n                />\r\n                {formik.touched.firstName && formik.errors.firstName ? (\r\n                    <div>{formik.errors.firstName}</div>\r\n                ) : null}\r\n                \r\n                <br/>\r\n\r\n                <label htmlFor='lastName'>Last Name</label>\r\n                <input\r\n                    id='lastName'\r\n                    name='lastName'\r\n                    type='text'\r\n                    onChange={formik.handleChange}\r\n                    value={formik.values.lastName}\r\n                />\r\n                {formik.touched.lastName && formik.errors.lastName ? (\r\n                    <div>{formik.errors.lastName}</div>\r\n                ) : null}\r\n                <br/>\r\n\r\n                <label htmlFor='username'>UserName</label>\r\n                <input\r\n                    id='username'\r\n                    name='username'\r\n                    type='text'\r\n                    onChange={formik.handleChange}\r\n                    value={formik.values.username}\r\n                />\r\n                {formik.touched.username && formik.errors.username ? (\r\n                    <div>{formik.errors.username}</div>\r\n                ) : null}\r\n                <br/>\r\n\r\n                <label htmlFor='sessionTimeOut'>Session Time Out</label>\r\n                <input\r\n                    id='sessionTimeOut'\r\n                    name='sessionTimeOut'\r\n                    type='text'\r\n                    onChange={formik.handleChange}\r\n                    value={formik.values.sessionTimeOut}\r\n                />\r\n                {formik.touched.sessionTimeOut && formik.errors.sessionTimeOut ? (\r\n                    <div>{formik.errors.sessionTimeOut}</div>\r\n                ) : null}\r\n                <br/>\r\n\r\n\r\n                Permission: <br/>\r\n                    \r\n                <FormGroup row>\r\n                    <FormControlLabel\r\n                        control={<Checkbox value='View Subscriptions' checked={formik.values.permissions.includes('View Subscriptions')}  onChange={handleChange} id='viewSubscriptions' name='viewSubscriptions' size='small' style ={{\r\n                            color: 'white', \r\n                            }}\r\n                                />}\r\n                        label='View Subscriptions'\r\n                    />\r\n\r\n                    <FormControlLabel\r\n                        control={<Checkbox value='Create Subscriptions' checked={formik.values.permissions.includes('Create Subscriptions')} onChange={handleChange} id='createSubscriptions' name='createSubscriptions' size='small' style ={{\r\n                            color: 'white', \r\n                            }}\r\n                                />}\r\n                        label='Create Subscriptions'\r\n                    />\r\n\r\n                    <FormControlLabel\r\n                        control={<Checkbox value='Delete Subscriptions' checked={formik.values.permissions.includes('Delete Subscriptions')}onChange={handleChange} id='deleteSubscriptions' name='deleteSubscriptions' size='small' style ={{\r\n                            color: 'white', \r\n                            }}\r\n                                />}\r\n                        label='Delete Subscriptions'\r\n                    />\r\n\r\n                    <FormControlLabel\r\n                        control={<Checkbox value='Update Subscriptions' checked={formik.values.permissions.includes('Update Subscriptions')} onChange={handleChange} id='updateSubscriptions' name='updateSubscriptions' size='small' style ={{\r\n                            color: 'white', \r\n                            }}\r\n                                />}\r\n                        label='Update Subscriptions'\r\n                    />\r\n\r\n                    <FormControlLabel\r\n                        control={<Checkbox value='View Movies' checked={formik.values.permissions.includes('View Movies')} onChange={handleChange} id='viewMovies' name='viewMovies' size='small' style ={{\r\n                            color: 'white', \r\n                            }}\r\n                                />}\r\n                        label='View Movies'\r\n                    />\r\n                    \r\n                    <FormControlLabel\r\n                        control={<Checkbox value='Create Movies' checked={formik.values.permissions.includes('Create Movies')} onChange={handleChange} id='createMovies' name='createMovies' size='small' style ={{\r\n                            color: 'white', \r\n                            }}\r\n                                />}\r\n                        label='Create Movies'\r\n                    />\r\n\r\n                    <FormControlLabel\r\n                        control={<Checkbox value='Delete Movies' checked={formik.values.permissions.includes('Delete Movies')} onChange={handleChange} id='deleteMovies' name='deleteMovies' size='small' style ={{\r\n                            color: 'white', \r\n                            }}\r\n                                />}\r\n                        label='Delete Movies'\r\n                    />\r\n                    \r\n                    <FormControlLabel\r\n                        control={<Checkbox value='Update Movies' checked={formik.values.permissions.includes('Update Movies')} onChange={handleChange} id='updateMovies' name='updateMovies' size='small' style ={{\r\n                            color: 'white', \r\n                            }}\r\n                                />}\r\n                        label='Update Movies'\r\n                    />\r\n                    \r\n                </FormGroup>\r\n                {formik.touched.permissions && formik.errors.permissions ? (\r\n                        <div>{formik.errors.permissions}</div>\r\n                    ) : null}\r\n                \r\n\r\n\r\n                <button type='submit'>Update</button>\r\n                <button><Link to=\"/users\">Cancel</Link></button>\r\n            </form>\r\n        </React.Fragment>\r\n    )\r\n}\r\nexport default EditUserComp;\r\n","C:\\mern_course\\FSFinalProject1\\CinemaFE\\cinemaapp\\src\\Components\\movies\\MovieComp.js",["150","151","152"],"import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { useDispatch } from 'react-redux';\r\n\r\nimport './MovieComp.css';\r\nimport moviesUtil from '../../Utils/movieUtil';\r\n\r\n\r\nfunction MovieComp(props) {\r\n    const dispatch = useDispatch();\r\n\r\n    const deleteMovie = async (movieId) =>{\r\n       /* let response = await moviesUtil.deleteMovie(movieId);\r\n        if(response.success){\r\n            dispatch({\r\n                type: \"DeleteMovie\",\r\n                payload: movieId\r\n            })\r\n        }\r\n        else{\r\n            dispatch({\r\n                type: \"UpdateMsg\",\r\n                payload: response.msg\r\n            })\r\n        }*/\r\n    }\r\n\r\n    return (\r\n        <div className=\"movie\">\r\n            name: {props.movie.name} <br/>\r\n            year: {props.movie.premiered.slice(0, 4)} <br/>\r\n            genres: {props.movie.genres.join()} <br/>\r\n            image: <img className=\"imgSize\" src={props.movie.image.medium}/> <br/>\r\n            subscriptions: <br/>\r\n\r\n            <button><Link to={`/movie/${props.movie._id}`}>Edit</Link></button>\r\n            <input type=\"button\" value=\"Delete\" onClick={() => deleteMovie(props.movie._id)}/>\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MovieComp\r\n","C:\\mern_course\\FSFinalProject1\\CinemaFE\\cinemaapp\\src\\Components\\users\\menu\\UserMenu.js",[],"C:\\mern_course\\FSFinalProject1\\CinemaFE\\cinemaapp\\src\\Components\\movies\\AddMovieComp.js",["153","154","155","156","157","158","159"],"import React, { useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useFormik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { userHistory, Link, useHistory } from 'react-router-dom';\r\nimport moment from 'moment';\r\n\r\nimport MovieMenu from './menu/MovieMenu';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { red } from '@material-ui/core/colors';\r\n\r\nimport './MovieComp.css';\r\nimport moviesUtil from '../../Utils/movieUtil';\r\nimport movieUtil from '../../Utils/movieUtil';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    container: {\r\n      display: 'flex',\r\n      flexWrap: 'wrap',\r\n    },\r\n    textField: {\r\n      marginLeft: theme.spacing(1),\r\n      marginRight: theme.spacing(1),\r\n      width: 200,\r\n      \r\n    },\r\n    input: {\r\n        color: \"red\",\r\n        backgroundColor: 'white'\r\n    }\r\n  }));\r\n\r\nfunction AddMovieComp() {\r\n    const [msg, setMsg] = useState('')\r\n    const classes = useStyles();\r\n\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n   \r\n    const formik = useFormik({\r\n        initialValues: {\r\n            name: '',\r\n            genres: '',\r\n            imageUrl: '',\r\n            premiered: '',\r\n            \r\n        },\r\n        validationSchema: Yup.object({\r\n            name: Yup.string()\r\n              .min(2, 'Too Short!')\r\n              .max(50, 'Too Long!')\r\n              .required('Required'),\r\n            genres: Yup.string()\r\n              .min(3, 'Too Short!')\r\n              .max(50, 'Too Long!')\r\n              .required('Required'),\r\n            imageUrl: Yup.string()\r\n              .min(10, 'Too Short!')\r\n              .max(100, 'Too Long!')\r\n              .required('Required'),\r\n            premiered: Yup.date()\r\n              .min(new Date('01/01/1930'))\r\n              .max(new Date('01/01/2930'))                   \r\n              .required('Required'),\r\n        }),\r\n        onSubmit: async (values) => {\r\n            let genres = values.genres.split(',');\r\n            let addedMovie = {\r\n                name : values.name,\r\n                genres : genres,\r\n                image : {\r\n                    medium : values.imageUrl,\r\n                    original : ''\r\n                },\r\n                premiered : values.premiered\r\n            }\r\n\r\n            let resp = await moviesUtil.addMovie(values)\r\n            //console.log(resp.data)\r\n\r\n            if(resp.success){\r\n                addedMovie._id = resp.movieId;\r\n                \r\n                dispatch({\r\n                    type: \"AddMovie\",\r\n                    payload: addedMovie\r\n                })\r\n                formik.resetForm();\r\n                setMsg(resp.msg);\r\n\r\n                //history.push('/movies');\r\n            }\r\n            else{\r\n                setMsg(resp.msg);\r\n                \r\n            }\r\n            \r\n            // setMsg(resp.msg);\r\n        },\r\n              \r\n\r\n              \r\n\r\n    });\r\n\r\n    const handleChange = (e) =>{\r\n        formik.handleChange(e);\r\n        alert(e.target.value)\r\n        console.log(formik.values.name)\r\n        \r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <MovieMenu/>\r\n            {msg}\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <label htmlFor=\"name\">Name</label>\r\n\r\n                <input\r\n                    id=\"name\"\r\n                    type=\"text\"\r\n                    {...formik.getFieldProps('name')}\r\n                />\r\n\r\n              \r\n                {formik.touched.name && formik.errors.name ? (\r\n                    <div>{formik.errors.name}</div>\r\n                ) : null}\r\n\r\n                <br/>\r\n\r\n                <label htmlFor=\"genres\">Genres</label>\r\n                <input\r\n                    id=\"genres\"\r\n                    type=\"text\"\r\n                    {...formik.getFieldProps('genres')}\r\n                />\r\n                {formik.touched.genres && formik.errors.genres ? (\r\n                    <div>{formik.errors.genres}</div>\r\n                ) : null}\r\n\r\n                <br/>\r\n\r\n                <label htmlFor=\"imageUrl\">Image Url</label>\r\n                <input\r\n                    id=\"imageUrl\"\r\n                    type=\"text\"\r\n                    {...formik.getFieldProps('imageUrl')}\r\n                />\r\n                {formik.touched.imageUrl && formik.errors.imageUrl ? (\r\n                    <div>{formik.errors.imageUrl}</div>\r\n                ) : null}\r\n                \r\n                <br/>\r\n                <label htmlFor=\"premiered\">Premiered</label>\r\n\r\n                <TextField \r\n                    id=\"premiered\"\r\n                    label=\"Premiered\"\r\n                    type=\"date\"\r\n                    format={'dd/mm/yyyy'}\r\n                    onChange={formik.handleChange}\r\n                    {...formik.getFieldProps('premiered')}\r\n                    \r\n                    \r\n                    className={classes.input}\r\n                    \r\n                    InputLabelProps={{\r\n                    shrink: true,\r\n                    \r\n                    \r\n                    }}\r\n                    \r\n                    \r\n                />\r\n                {formik.touched.premiered && formik.errors.premiered ? (\r\n                    <div>{formik.errors.premiered}</div>\r\n                ) : null}\r\n<br/>\r\n                <button type='submit'>Submit</button>\r\n                <button><Link to=\"/movies\">Cancel</Link></button>\r\n            </form>\r\n            \r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default AddMovieComp\r\n","C:\\mern_course\\FSFinalProject1\\CinemaFE\\cinemaapp\\src\\Components\\movies\\EditMovieComp.js",["160","161","162","163","164","165","166"],"import React, { useState, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useFormik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { userHistory, Link, useHistory } from 'react-router-dom';\r\nimport moment from 'moment';\r\n\r\nimport MovieMenu from './menu/MovieMenu';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { red } from '@material-ui/core/colors';\r\n\r\nimport './MovieComp.css';\r\nimport moviesUtil from '../../Utils/movieUtil';\r\nimport movieUtil from '../../Utils/movieUtil';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    container: {\r\n      display: 'flex',\r\n      flexWrap: 'wrap',\r\n    },\r\n    textField: {\r\n      marginLeft: theme.spacing(1),\r\n      marginRight: theme.spacing(1),\r\n      width: 200,\r\n      \r\n    },\r\n    input: {\r\n        color: \"red\",\r\n        backgroundColor: 'white'\r\n    }\r\n  }));\r\n\r\nfunction EditMovieComp(props) {\r\n    const [msg, setMsg] = useState('');\r\n    const [movie, setMovie] = useState(null);\r\n    const movies = useSelector(state => state.movies);\r\n\r\n    const classes = useStyles();\r\n\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            name: '',\r\n            genres: '',\r\n            imageUrl: '',\r\n            premiered: '',\r\n            \r\n        },\r\n        validationSchema: Yup.object({\r\n            name: Yup.string()\r\n              .min(2, 'Too Short!')\r\n              .max(50, 'Too Long!')\r\n              .required('Required'),\r\n              genres: Yup.string()\r\n              .min(3, 'Too Short!')\r\n              .max(50, 'Too Long!')\r\n              .required('Required'),\r\n            imageUrl: Yup.string()\r\n              .min(10, 'Too Short!')\r\n              .max(100, 'Too Long!')\r\n              .required('Required'),\r\n            premiered: Yup.date()\r\n              .min(new Date('01/01/1930'))\r\n              .max(new Date('01/01/2930'))                   \r\n              .required('Required'),\r\n        }),\r\n        onSubmit: async (values) => {\r\n            let genres = values.genres.split(',');\r\n            let updatedMovie = {\r\n                _id: props.match.params.id,\r\n                name : values.name,\r\n                genres : genres,\r\n                image : {\r\n                    medium : values.imageUrl,\r\n                    original : ''\r\n                },\r\n                premiered : values.premiered\r\n            }\r\n\r\n            let resp = await moviesUtil.updateMovie(updatedMovie);\r\n            console.log(resp.data)\r\n\r\n            if(resp.success){\r\n                dispatch({\r\n                    type: \"UpdateMovie\",\r\n                    payload: updatedMovie\r\n                })\r\n                \r\n                setMsg(resp.msg);\r\n\r\n                history.push('/movies');\r\n            }\r\n            else{\r\n                setMsg(resp.msg);\r\n                \r\n            }\r\n            \r\n            // setMsg(resp.msg);\r\n        },\r\n    });\r\n\r\n    useEffect(() => {\r\n        let movieId = props.match.params.id;\r\n        let movie = movies.filter(m => m._id === movieId)[0];\r\n        console.log(movie)\r\n\r\n        let fields = ['name', 'genres', 'imageUrl', 'premiered'];\r\n\r\n        fields.forEach(field => {\r\n                if(field === 'imageUrl'){\r\n                    formik.setFieldValue(field, movie.image.medium);\r\n                }\r\n                else if(field === 'premiered'){\r\n                    formik.setFieldValue(field, movie[field].slice(0, 10));\r\n                }\r\n                else{\r\n                    formik.setFieldValue(field, movie[field]);\r\n                }\r\n            }\r\n        );\r\n\r\n        //setMovie(movie);\r\n        \r\n    }, [])\r\n\r\n    return (\r\n        \r\n        <React.Fragment>\r\n            <MovieMenu/>\r\n            {msg}\r\n            \r\n            <form onSubmit={formik.handleSubmit}>\r\n                <label htmlFor=\"name\">Name</label>\r\n\r\n                <input\r\n                    id=\"name\"\r\n                    name=\"name\"\r\n                    type=\"text\"\r\n                    {...formik.getFieldProps('name')}\r\n                    value={formik.values.name}\r\n                />\r\n\r\n                {formik.touched.name && formik.errors.name ? (\r\n                    <div>{formik.errors.name}</div>\r\n                ) : null}\r\n\r\n                <br/>\r\n\r\n                <label htmlFor=\"genres\">Genres</label>\r\n                <input\r\n                    id=\"genres\"\r\n                    name=\"genres\"\r\n                    type=\"text\"\r\n                    {...formik.getFieldProps('genres')}\r\n                    value={formik.values.genres}\r\n                />\r\n                {formik.touched.genres && formik.errors.genres ? (\r\n                    <div>{formik.errors.genres}</div>\r\n                ) : null}\r\n\r\n                <br/>\r\n\r\n                <label htmlFor=\"imageUrl\">Image Url</label>\r\n                <input\r\n                    id=\"imageUrl\"\r\n                    type=\"text\"\r\n                    {...formik.getFieldProps('imageUrl')}\r\n                    value={formik.values.imageUrl}\r\n                />\r\n                {formik.touched.imageUrl && formik.errors.imageUrl ? (\r\n                    <div>{formik.errors.imageUrl}</div>\r\n                ) : null}\r\n                \r\n                <br/>\r\n                <label htmlFor=\"premiered\">Premiered</label>\r\n\r\n                <TextField \r\n                    id=\"premiered\"\r\n                    label=\"Premiered\"\r\n                    type=\"date\"\r\n                    format={'dd/mm/yyyy'}\r\n                    onChange={formik.handleChange}\r\n                    {...formik.getFieldProps('premiered')}\r\n                    value={formik.values.premiered}\r\n                    \r\n                    \r\n                    className={classes.input}\r\n                    \r\n                    InputLabelProps={{\r\n                    shrink: true,\r\n                    \r\n                    \r\n                    }}\r\n                    \r\n                    \r\n                />\r\n                {formik.touched.premiered && formik.errors.premiered ? (\r\n                    <div>{formik.errors.premiered}</div>\r\n                ) : null}\r\n<br/>\r\n                <button type='submit'>Submit</button>\r\n                <button><Link to=\"/movies\">Cancel</Link></button>\r\n            </form>\r\n            \r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default EditMovieComp\r\n","C:\\mern_course\\FSFinalProject1\\CinemaFE\\cinemaapp\\src\\Components\\movies\\menu\\MovieMenu.js",[],"C:\\mern_course\\FSFinalProject1\\CinemaFE\\cinemaapp\\src\\Utils\\memberUtil.js",["167"],{"ruleId":"168","replacedBy":"169"},{"ruleId":"170","replacedBy":"171"},{"ruleId":"172","severity":1,"message":"173","line":1,"column":27,"nodeType":"174","messageId":"175","endLine":1,"endColumn":35},{"ruleId":"176","severity":1,"message":"177","line":73,"column":8,"nodeType":"178","endLine":73,"endColumn":10,"suggestions":"179"},{"ruleId":"172","severity":1,"message":"180","line":1,"column":27,"nodeType":"174","messageId":"175","endLine":1,"endColumn":36},{"ruleId":"172","severity":1,"message":"181","line":10,"column":16,"nodeType":"174","messageId":"175","endLine":10,"endColumn":27},{"ruleId":"172","severity":1,"message":"182","line":10,"column":29,"nodeType":"174","messageId":"175","endLine":10,"endColumn":43},{"ruleId":"172","severity":1,"message":"183","line":1,"column":10,"nodeType":"174","messageId":"175","endLine":1,"endColumn":13},{"ruleId":"172","severity":1,"message":"184","line":2,"column":8,"nodeType":"174","messageId":"175","endLine":2,"endColumn":17},{"ruleId":"185","severity":1,"message":"186","line":53,"column":1,"nodeType":"187","endLine":53,"endColumn":67},{"ruleId":"172","severity":1,"message":"188","line":4,"column":8,"nodeType":"174","messageId":"175","endLine":4,"endColumn":13},{"ruleId":"168","replacedBy":"189"},{"ruleId":"170","replacedBy":"190"},{"ruleId":"172","severity":1,"message":"191","line":6,"column":8,"nodeType":"174","messageId":"175","endLine":6,"endColumn":14},{"ruleId":"185","severity":1,"message":"186","line":46,"column":1,"nodeType":"187","endLine":46,"endColumn":88},{"ruleId":"172","severity":1,"message":"173","line":1,"column":17,"nodeType":"174","messageId":"175","endLine":1,"endColumn":25},{"ruleId":"172","severity":1,"message":"180","line":1,"column":27,"nodeType":"174","messageId":"175","endLine":1,"endColumn":36},{"ruleId":"172","severity":1,"message":"173","line":1,"column":16,"nodeType":"174","messageId":"175","endLine":1,"endColumn":24},{"ruleId":"172","severity":1,"message":"192","line":3,"column":10,"nodeType":"174","messageId":"175","endLine":3,"endColumn":29},{"ruleId":"172","severity":1,"message":"193","line":10,"column":12,"nodeType":"174","messageId":"175","endLine":10,"endColumn":15},{"ruleId":"172","severity":1,"message":"194","line":10,"column":17,"nodeType":"174","messageId":"175","endLine":10,"endColumn":23},{"ruleId":"176","severity":1,"message":"195","line":29,"column":8,"nodeType":"178","endLine":29,"endColumn":10,"suggestions":"196"},{"ruleId":"172","severity":1,"message":"197","line":6,"column":8,"nodeType":"174","messageId":"175","endLine":6,"endColumn":18},{"ruleId":"172","severity":1,"message":"198","line":10,"column":11,"nodeType":"174","messageId":"175","endLine":10,"endColumn":19},{"ruleId":"199","severity":1,"message":"200","line":33,"column":20,"nodeType":"201","endLine":33,"endColumn":77},{"ruleId":"172","severity":1,"message":"202","line":2,"column":23,"nodeType":"174","messageId":"175","endLine":2,"endColumn":34},{"ruleId":"172","severity":1,"message":"203","line":5,"column":10,"nodeType":"174","messageId":"175","endLine":5,"endColumn":21},{"ruleId":"172","severity":1,"message":"204","line":6,"column":8,"nodeType":"174","messageId":"175","endLine":6,"endColumn":14},{"ruleId":"172","severity":1,"message":"205","line":12,"column":10,"nodeType":"174","messageId":"175","endLine":12,"endColumn":13},{"ruleId":"172","severity":1,"message":"184","line":16,"column":8,"nodeType":"174","messageId":"175","endLine":16,"endColumn":17},{"ruleId":"172","severity":1,"message":"206","line":40,"column":11,"nodeType":"174","messageId":"175","endLine":40,"endColumn":18},{"ruleId":"172","severity":1,"message":"207","line":108,"column":11,"nodeType":"174","messageId":"175","endLine":108,"endColumn":23},{"ruleId":"172","severity":1,"message":"203","line":5,"column":10,"nodeType":"174","messageId":"175","endLine":5,"endColumn":21},{"ruleId":"172","severity":1,"message":"204","line":6,"column":8,"nodeType":"174","messageId":"175","endLine":6,"endColumn":14},{"ruleId":"172","severity":1,"message":"205","line":12,"column":10,"nodeType":"174","messageId":"175","endLine":12,"endColumn":13},{"ruleId":"172","severity":1,"message":"184","line":16,"column":8,"nodeType":"174","messageId":"175","endLine":16,"endColumn":17},{"ruleId":"172","severity":1,"message":"208","line":37,"column":12,"nodeType":"174","messageId":"175","endLine":37,"endColumn":17},{"ruleId":"172","severity":1,"message":"209","line":37,"column":19,"nodeType":"174","messageId":"175","endLine":37,"endColumn":27},{"ruleId":"176","severity":1,"message":"210","line":128,"column":8,"nodeType":"178","endLine":128,"endColumn":10,"suggestions":"211"},{"ruleId":"185","severity":1,"message":"186","line":53,"column":1,"nodeType":"187","endLine":53,"endColumn":71},"no-native-reassign",["212"],"no-negated-in-lhs",["213"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'dispatch', 'members.length', 'movies.length', and 'users.length'. Either include them or remove the dependency array.","ArrayExpression",["214"],"'useEffect' is defined but never used.","'searchMovie' is assigned a value but never used.","'setSearchMovie' is assigned a value but never used.","'act' is defined but never used.","'movieUtil' is defined but never used.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","'CompB' is defined but never used.",["212"],["213"],"'Movies' is defined but never used.","'computeHeadingLevel' is defined but never used.","'msg' is assigned a value but never used.","'setMsg' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'formik', 'props.match.params.id', and 'users'. Either include them or remove the dependency array.",["215"],"'moviesUtil' is defined but never used.","'dispatch' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'useSelector' is defined but never used.","'userHistory' is defined but never used.","'moment' is defined but never used.","'red' is defined but never used.","'history' is assigned a value but never used.","'handleChange' is assigned a value but never used.","'movie' is assigned a value but never used.","'setMovie' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'formik', 'movies', and 'props.match.params.id'. Either include them or remove the dependency array.",["216"],"no-global-assign","no-unsafe-negation",{"desc":"217","fix":"218"},{"desc":"219","fix":"220"},{"desc":"221","fix":"222"},"Update the dependencies array to be: [dispatch, members.length, movies.length, users.length]",{"range":"223","text":"224"},"Update the dependencies array to be: [formik, props.match.params.id, users]",{"range":"225","text":"226"},"Update the dependencies array to be: [formik, movies, props.match.params.id]",{"range":"227","text":"228"},[2295,2297],"[dispatch, members.length, movies.length, users.length]",[1026,1028],"[formik, props.match.params.id, users]",[3789,3791],"[formik, movies, props.match.params.id]"]